
HTTPS_Bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029c4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08002ad0  08002ad0  00003ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c2c  08002c2c  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002c2c  08002c2c  00003c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c34  08002c34  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c34  08002c34  00003c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c38  08002c38  00003c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002c3c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  2000005c  08002c98  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08002c98  000043b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091a2  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001600  00000000  00000000  0000d227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  0000e828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006fc  00000000  00000000  0000f110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001708f  00000000  00000000  0000f80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b577  00000000  00000000  0002689b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084750  00000000  00000000  00031e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6562  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029ec  00000000  00000000  000b65a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000b8f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ab8 	.word	0x08002ab8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002ab8 	.word	0x08002ab8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <SIMTransmit>:
void checkInternetConnection(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SIMTransmit(const char *cmd) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
    memset(buffer, 0, sizeof(buffer)); // Clear buffer
 8000164:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000168:	2100      	movs	r1, #0
 800016a:	4810      	ldr	r0, [pc, #64]	@ (80001ac <SIMTransmit+0x50>)
 800016c:	f002 f800 	bl	8002170 <memset>
    HAL_UART_Transmit(&huart1, (uint8_t *)cmd, strlen(cmd), 1000);
 8000170:	6878      	ldr	r0, [r7, #4]
 8000172:	f7ff ffeb 	bl	800014c <strlen>
 8000176:	4603      	mov	r3, r0
 8000178:	b29a      	uxth	r2, r3
 800017a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800017e:	6879      	ldr	r1, [r7, #4]
 8000180:	480b      	ldr	r0, [pc, #44]	@ (80001b0 <SIMTransmit+0x54>)
 8000182:	f001 fd67 	bl	8001c54 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n", 2, 1000);
 8000186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800018a:	2202      	movs	r2, #2
 800018c:	4909      	ldr	r1, [pc, #36]	@ (80001b4 <SIMTransmit+0x58>)
 800018e:	4808      	ldr	r0, [pc, #32]	@ (80001b0 <SIMTransmit+0x54>)
 8000190:	f001 fd60 	bl	8001c54 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart1, buffer, sizeof(buffer), 1000); // Read response
 8000194:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000198:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800019c:	4903      	ldr	r1, [pc, #12]	@ (80001ac <SIMTransmit+0x50>)
 800019e:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <SIMTransmit+0x54>)
 80001a0:	f001 fde3 	bl	8001d6a <HAL_UART_Receive>
}
 80001a4:	bf00      	nop
 80001a6:	3708      	adds	r7, #8
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	2000015c 	.word	0x2000015c
 80001b0:	200000cc 	.word	0x200000cc
 80001b4:	08002ad0 	.word	0x08002ad0

080001b8 <checkInternetConnection>:

void checkInternetConnection(void) {
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b096      	sub	sp, #88	@ 0x58
 80001bc:	af00      	add	r7, sp, #0
    uint8_t atOK = 0, cgregOK = 0, pdpOK = 0;
 80001be:	2300      	movs	r3, #0
 80001c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80001c4:	2300      	movs	r3, #0
 80001c6:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80001ca:	2300      	movs	r3, #0
 80001cc:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    uint32_t startTick;
    char atCmd[80];

    // Step 1: Power on A7670G (pull PWRKEY low for 1.5s)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // Release
 80001d0:	2201      	movs	r2, #1
 80001d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001d6:	48b9      	ldr	r0, [pc, #740]	@ (80004bc <checkInternetConnection+0x304>)
 80001d8:	f000 ff80 	bl	80010dc <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80001dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001e0:	f000 fcf0 	bl	8000bc4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // PWRKEY low
 80001e4:	2200      	movs	r2, #0
 80001e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001ea:	48b4      	ldr	r0, [pc, #720]	@ (80004bc <checkInternetConnection+0x304>)
 80001ec:	f000 ff76 	bl	80010dc <HAL_GPIO_WritePin>
    HAL_Delay(1500);
 80001f0:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80001f4:	f000 fce6 	bl	8000bc4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // Release
 80001f8:	2201      	movs	r2, #1
 80001fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001fe:	48af      	ldr	r0, [pc, #700]	@ (80004bc <checkInternetConnection+0x304>)
 8000200:	f000 ff6c 	bl	80010dc <HAL_GPIO_WritePin>
    HAL_Delay(150000); // Wait for module to boot
 8000204:	48ae      	ldr	r0, [pc, #696]	@ (80004c0 <checkInternetConnection+0x308>)
 8000206:	f000 fcdd 	bl	8000bc4 <HAL_Delay>

    // Step 2: Test AT command
    startTick = HAL_GetTick();
 800020a:	f000 fcd1 	bl	8000bb0 <HAL_GetTick>
 800020e:	6538      	str	r0, [r7, #80]	@ 0x50
    while (!atOK && (HAL_GetTick() - startTick < timeout)) {
 8000210:	e029      	b.n	8000266 <checkInternetConnection+0xae>
        SIMTransmit("AT");
 8000212:	48ac      	ldr	r0, [pc, #688]	@ (80004c4 <checkInternetConnection+0x30c>)
 8000214:	f7ff ffa2 	bl	800015c <SIMTransmit>
        HAL_UART_Transmit(&huart2, (uint8_t *)"AT: ", 4, 1000); // Debug to UART2
 8000218:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800021c:	2204      	movs	r2, #4
 800021e:	49aa      	ldr	r1, [pc, #680]	@ (80004c8 <checkInternetConnection+0x310>)
 8000220:	48aa      	ldr	r0, [pc, #680]	@ (80004cc <checkInternetConnection+0x314>)
 8000222:	f001 fd17 	bl	8001c54 <HAL_UART_Transmit>
	    HAL_UART_Transmit(&huart2, buffer, strlen((char *)buffer), 1000);
 8000226:	48aa      	ldr	r0, [pc, #680]	@ (80004d0 <checkInternetConnection+0x318>)
 8000228:	f7ff ff90 	bl	800014c <strlen>
 800022c:	4603      	mov	r3, r0
 800022e:	b29a      	uxth	r2, r3
 8000230:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000234:	49a6      	ldr	r1, [pc, #664]	@ (80004d0 <checkInternetConnection+0x318>)
 8000236:	48a5      	ldr	r0, [pc, #660]	@ (80004cc <checkInternetConnection+0x314>)
 8000238:	f001 fd0c 	bl	8001c54 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 1000);
 800023c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000240:	2202      	movs	r2, #2
 8000242:	49a4      	ldr	r1, [pc, #656]	@ (80004d4 <checkInternetConnection+0x31c>)
 8000244:	48a1      	ldr	r0, [pc, #644]	@ (80004cc <checkInternetConnection+0x314>)
 8000246:	f001 fd05 	bl	8001c54 <HAL_UART_Transmit>
        if (strstr((char *)buffer, "OK")) {
 800024a:	49a3      	ldr	r1, [pc, #652]	@ (80004d8 <checkInternetConnection+0x320>)
 800024c:	48a0      	ldr	r0, [pc, #640]	@ (80004d0 <checkInternetConnection+0x318>)
 800024e:	f001 ff97 	bl	8002180 <strstr>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d002      	beq.n	800025e <checkInternetConnection+0xa6>
            atOK = 1;
 8000258:	2301      	movs	r3, #1
 800025a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        }
        HAL_Delay(2000);
 800025e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000262:	f000 fcaf 	bl	8000bc4 <HAL_Delay>
    while (!atOK && (HAL_GetTick() - startTick < timeout)) {
 8000266:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800026a:	2b00      	cmp	r3, #0
 800026c:	d108      	bne.n	8000280 <checkInternetConnection+0xc8>
 800026e:	f000 fc9f 	bl	8000bb0 <HAL_GetTick>
 8000272:	4602      	mov	r2, r0
 8000274:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000276:	1ad3      	subs	r3, r2, r3
 8000278:	f242 7210 	movw	r2, #10000	@ 0x2710
 800027c:	4293      	cmp	r3, r2
 800027e:	d3c8      	bcc.n	8000212 <checkInternetConnection+0x5a>
    }

    // Step 3: Check SIM status
        if (atOK) {
 8000280:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000284:	2b00      	cmp	r3, #0
 8000286:	d03a      	beq.n	80002fe <checkInternetConnection+0x146>
            startTick = HAL_GetTick();
 8000288:	f000 fc92 	bl	8000bb0 <HAL_GetTick>
 800028c:	6538      	str	r0, [r7, #80]	@ 0x50
            while (!cgregOK && (HAL_GetTick() - startTick < timeout)) {
 800028e:	e029      	b.n	80002e4 <checkInternetConnection+0x12c>
                SIMTransmit("AT+CPIN?");
 8000290:	4892      	ldr	r0, [pc, #584]	@ (80004dc <checkInternetConnection+0x324>)
 8000292:	f7ff ff63 	bl	800015c <SIMTransmit>
                HAL_UART_Transmit(&huart2, (uint8_t *)"CPIN: ", 6, 1000);
 8000296:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800029a:	2206      	movs	r2, #6
 800029c:	4990      	ldr	r1, [pc, #576]	@ (80004e0 <checkInternetConnection+0x328>)
 800029e:	488b      	ldr	r0, [pc, #556]	@ (80004cc <checkInternetConnection+0x314>)
 80002a0:	f001 fcd8 	bl	8001c54 <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart2, buffer, strlen((char *)buffer), 1000);
 80002a4:	488a      	ldr	r0, [pc, #552]	@ (80004d0 <checkInternetConnection+0x318>)
 80002a6:	f7ff ff51 	bl	800014c <strlen>
 80002aa:	4603      	mov	r3, r0
 80002ac:	b29a      	uxth	r2, r3
 80002ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002b2:	4987      	ldr	r1, [pc, #540]	@ (80004d0 <checkInternetConnection+0x318>)
 80002b4:	4885      	ldr	r0, [pc, #532]	@ (80004cc <checkInternetConnection+0x314>)
 80002b6:	f001 fccd 	bl	8001c54 <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 1000);
 80002ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002be:	2202      	movs	r2, #2
 80002c0:	4984      	ldr	r1, [pc, #528]	@ (80004d4 <checkInternetConnection+0x31c>)
 80002c2:	4882      	ldr	r0, [pc, #520]	@ (80004cc <checkInternetConnection+0x314>)
 80002c4:	f001 fcc6 	bl	8001c54 <HAL_UART_Transmit>
                if (strstr((char *)buffer, "+CPIN: READY")) {
 80002c8:	4986      	ldr	r1, [pc, #536]	@ (80004e4 <checkInternetConnection+0x32c>)
 80002ca:	4881      	ldr	r0, [pc, #516]	@ (80004d0 <checkInternetConnection+0x318>)
 80002cc:	f001 ff58 	bl	8002180 <strstr>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d002      	beq.n	80002dc <checkInternetConnection+0x124>
                    cgregOK = 1;
 80002d6:	2301      	movs	r3, #1
 80002d8:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                }
                HAL_Delay(500);
 80002dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002e0:	f000 fc70 	bl	8000bc4 <HAL_Delay>
            while (!cgregOK && (HAL_GetTick() - startTick < timeout)) {
 80002e4:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d108      	bne.n	80002fe <checkInternetConnection+0x146>
 80002ec:	f000 fc60 	bl	8000bb0 <HAL_GetTick>
 80002f0:	4602      	mov	r2, r0
 80002f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80002f4:	1ad3      	subs	r3, r2, r3
 80002f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d3c8      	bcc.n	8000290 <checkInternetConnection+0xd8>
            }
        }

        // Step 4: Check network registration
        if (cgregOK) {
 80002fe:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000302:	2b00      	cmp	r3, #0
 8000304:	d041      	beq.n	800038a <checkInternetConnection+0x1d2>
            startTick = HAL_GetTick();
 8000306:	f000 fc53 	bl	8000bb0 <HAL_GetTick>
 800030a:	6538      	str	r0, [r7, #80]	@ 0x50
            while (!pdpOK && (HAL_GetTick() - startTick < timeout)) {
 800030c:	e030      	b.n	8000370 <checkInternetConnection+0x1b8>
                SIMTransmit("AT+CEREG?");
 800030e:	4876      	ldr	r0, [pc, #472]	@ (80004e8 <checkInternetConnection+0x330>)
 8000310:	f7ff ff24 	bl	800015c <SIMTransmit>
                HAL_UART_Transmit(&huart2, (uint8_t *)"CEREG: ", 7, 1000);
 8000314:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000318:	2207      	movs	r2, #7
 800031a:	4974      	ldr	r1, [pc, #464]	@ (80004ec <checkInternetConnection+0x334>)
 800031c:	486b      	ldr	r0, [pc, #428]	@ (80004cc <checkInternetConnection+0x314>)
 800031e:	f001 fc99 	bl	8001c54 <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart2, buffer, strlen((char *)buffer), 1000);
 8000322:	486b      	ldr	r0, [pc, #428]	@ (80004d0 <checkInternetConnection+0x318>)
 8000324:	f7ff ff12 	bl	800014c <strlen>
 8000328:	4603      	mov	r3, r0
 800032a:	b29a      	uxth	r2, r3
 800032c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000330:	4967      	ldr	r1, [pc, #412]	@ (80004d0 <checkInternetConnection+0x318>)
 8000332:	4866      	ldr	r0, [pc, #408]	@ (80004cc <checkInternetConnection+0x314>)
 8000334:	f001 fc8e 	bl	8001c54 <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 1000);
 8000338:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800033c:	2202      	movs	r2, #2
 800033e:	4965      	ldr	r1, [pc, #404]	@ (80004d4 <checkInternetConnection+0x31c>)
 8000340:	4862      	ldr	r0, [pc, #392]	@ (80004cc <checkInternetConnection+0x314>)
 8000342:	f001 fc87 	bl	8001c54 <HAL_UART_Transmit>
                if (strstr((char *)buffer, "+CEREG: 0,1") || strstr((char *)buffer, "+CEREG: 0,5")) {
 8000346:	496a      	ldr	r1, [pc, #424]	@ (80004f0 <checkInternetConnection+0x338>)
 8000348:	4861      	ldr	r0, [pc, #388]	@ (80004d0 <checkInternetConnection+0x318>)
 800034a:	f001 ff19 	bl	8002180 <strstr>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d106      	bne.n	8000362 <checkInternetConnection+0x1aa>
 8000354:	4967      	ldr	r1, [pc, #412]	@ (80004f4 <checkInternetConnection+0x33c>)
 8000356:	485e      	ldr	r0, [pc, #376]	@ (80004d0 <checkInternetConnection+0x318>)
 8000358:	f001 ff12 	bl	8002180 <strstr>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d002      	beq.n	8000368 <checkInternetConnection+0x1b0>
                    pdpOK = 1;
 8000362:	2301      	movs	r3, #1
 8000364:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                }
                HAL_Delay(500);
 8000368:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800036c:	f000 fc2a 	bl	8000bc4 <HAL_Delay>
            while (!pdpOK && (HAL_GetTick() - startTick < timeout)) {
 8000370:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000374:	2b00      	cmp	r3, #0
 8000376:	d108      	bne.n	800038a <checkInternetConnection+0x1d2>
 8000378:	f000 fc1a 	bl	8000bb0 <HAL_GetTick>
 800037c:	4602      	mov	r2, r0
 800037e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000380:	1ad3      	subs	r3, r2, r3
 8000382:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000386:	4293      	cmp	r3, r2
 8000388:	d3c1      	bcc.n	800030e <checkInternetConnection+0x156>
            }
        }

        // Step 5: Set APN and activate PDP context
        if (pdpOK) {
 800038a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800038e:	2b00      	cmp	r3, #0
 8000390:	d046      	beq.n	8000420 <checkInternetConnection+0x268>
            sprintf(atCmd, "AT+CGDCONT=1,\"IP\",\"%s\"", apn);
 8000392:	463b      	mov	r3, r7
 8000394:	4a58      	ldr	r2, [pc, #352]	@ (80004f8 <checkInternetConnection+0x340>)
 8000396:	4959      	ldr	r1, [pc, #356]	@ (80004fc <checkInternetConnection+0x344>)
 8000398:	4618      	mov	r0, r3
 800039a:	f001 fec7 	bl	800212c <siprintf>
            SIMTransmit(atCmd);
 800039e:	463b      	mov	r3, r7
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff fedb 	bl	800015c <SIMTransmit>
            HAL_UART_Transmit(&huart2, (uint8_t *)"CGDCONT: ", 9, 1000);
 80003a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003aa:	2209      	movs	r2, #9
 80003ac:	4954      	ldr	r1, [pc, #336]	@ (8000500 <checkInternetConnection+0x348>)
 80003ae:	4847      	ldr	r0, [pc, #284]	@ (80004cc <checkInternetConnection+0x314>)
 80003b0:	f001 fc50 	bl	8001c54 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, buffer, strlen((char *)buffer), 1000);
 80003b4:	4846      	ldr	r0, [pc, #280]	@ (80004d0 <checkInternetConnection+0x318>)
 80003b6:	f7ff fec9 	bl	800014c <strlen>
 80003ba:	4603      	mov	r3, r0
 80003bc:	b29a      	uxth	r2, r3
 80003be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003c2:	4943      	ldr	r1, [pc, #268]	@ (80004d0 <checkInternetConnection+0x318>)
 80003c4:	4841      	ldr	r0, [pc, #260]	@ (80004cc <checkInternetConnection+0x314>)
 80003c6:	f001 fc45 	bl	8001c54 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 1000);
 80003ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003ce:	2202      	movs	r2, #2
 80003d0:	4940      	ldr	r1, [pc, #256]	@ (80004d4 <checkInternetConnection+0x31c>)
 80003d2:	483e      	ldr	r0, [pc, #248]	@ (80004cc <checkInternetConnection+0x314>)
 80003d4:	f001 fc3e 	bl	8001c54 <HAL_UART_Transmit>
            HAL_Delay(500);
 80003d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003dc:	f000 fbf2 	bl	8000bc4 <HAL_Delay>
            SIMTransmit("AT+CGACT=1,1");
 80003e0:	4848      	ldr	r0, [pc, #288]	@ (8000504 <checkInternetConnection+0x34c>)
 80003e2:	f7ff febb 	bl	800015c <SIMTransmit>
            HAL_UART_Transmit(&huart2, (uint8_t *)"CGACT: ", 7, 1000);
 80003e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003ea:	2207      	movs	r2, #7
 80003ec:	4946      	ldr	r1, [pc, #280]	@ (8000508 <checkInternetConnection+0x350>)
 80003ee:	4837      	ldr	r0, [pc, #220]	@ (80004cc <checkInternetConnection+0x314>)
 80003f0:	f001 fc30 	bl	8001c54 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, buffer, strlen((char *)buffer), 1000);
 80003f4:	4836      	ldr	r0, [pc, #216]	@ (80004d0 <checkInternetConnection+0x318>)
 80003f6:	f7ff fea9 	bl	800014c <strlen>
 80003fa:	4603      	mov	r3, r0
 80003fc:	b29a      	uxth	r2, r3
 80003fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000402:	4933      	ldr	r1, [pc, #204]	@ (80004d0 <checkInternetConnection+0x318>)
 8000404:	4831      	ldr	r0, [pc, #196]	@ (80004cc <checkInternetConnection+0x314>)
 8000406:	f001 fc25 	bl	8001c54 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 1000);
 800040a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800040e:	2202      	movs	r2, #2
 8000410:	4930      	ldr	r1, [pc, #192]	@ (80004d4 <checkInternetConnection+0x31c>)
 8000412:	482e      	ldr	r0, [pc, #184]	@ (80004cc <checkInternetConnection+0x314>)
 8000414:	f001 fc1e 	bl	8001c54 <HAL_UART_Transmit>
            HAL_Delay(2000);
 8000418:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800041c:	f000 fbd2 	bl	8000bc4 <HAL_Delay>
        }

        // Step 6: Check IP address (connection status)
        if (pdpOK) {
 8000420:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000424:	2b00      	cmp	r3, #0
 8000426:	d025      	beq.n	8000474 <checkInternetConnection+0x2bc>
            SIMTransmit("AT+CGPADDR=1");
 8000428:	4838      	ldr	r0, [pc, #224]	@ (800050c <checkInternetConnection+0x354>)
 800042a:	f7ff fe97 	bl	800015c <SIMTransmit>
            HAL_UART_Transmit(&huart2, (uint8_t *)"CGPADDR: ", 9, 1000);
 800042e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000432:	2209      	movs	r2, #9
 8000434:	4936      	ldr	r1, [pc, #216]	@ (8000510 <checkInternetConnection+0x358>)
 8000436:	4825      	ldr	r0, [pc, #148]	@ (80004cc <checkInternetConnection+0x314>)
 8000438:	f001 fc0c 	bl	8001c54 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, buffer, strlen((char *)buffer), 1000);
 800043c:	4824      	ldr	r0, [pc, #144]	@ (80004d0 <checkInternetConnection+0x318>)
 800043e:	f7ff fe85 	bl	800014c <strlen>
 8000442:	4603      	mov	r3, r0
 8000444:	b29a      	uxth	r2, r3
 8000446:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800044a:	4921      	ldr	r1, [pc, #132]	@ (80004d0 <checkInternetConnection+0x318>)
 800044c:	481f      	ldr	r0, [pc, #124]	@ (80004cc <checkInternetConnection+0x314>)
 800044e:	f001 fc01 	bl	8001c54 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 1000);
 8000452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000456:	2202      	movs	r2, #2
 8000458:	491e      	ldr	r1, [pc, #120]	@ (80004d4 <checkInternetConnection+0x31c>)
 800045a:	481c      	ldr	r0, [pc, #112]	@ (80004cc <checkInternetConnection+0x314>)
 800045c:	f001 fbfa 	bl	8001c54 <HAL_UART_Transmit>
            if (strstr((char *)buffer, "+CGPADDR: 1,")) {
 8000460:	492c      	ldr	r1, [pc, #176]	@ (8000514 <checkInternetConnection+0x35c>)
 8000462:	481b      	ldr	r0, [pc, #108]	@ (80004d0 <checkInternetConnection+0x318>)
 8000464:	f001 fe8c 	bl	8002180 <strstr>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d002      	beq.n	8000474 <checkInternetConnection+0x2bc>
                isConnected = 1;
 800046e:	4b2a      	ldr	r3, [pc, #168]	@ (8000518 <checkInternetConnection+0x360>)
 8000470:	2201      	movs	r2, #1
 8000472:	701a      	strb	r2, [r3, #0]
            }
        }

        // Step 7: Output final status to UART2
        if (isConnected) {
 8000474:	4b28      	ldr	r3, [pc, #160]	@ (8000518 <checkInternetConnection+0x360>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d053      	beq.n	8000524 <checkInternetConnection+0x36c>
            HAL_UART_Transmit(&huart2, (uint8_t *)"Connected! IP: ", 15, 1000);
 800047c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000480:	220f      	movs	r2, #15
 8000482:	4926      	ldr	r1, [pc, #152]	@ (800051c <checkInternetConnection+0x364>)
 8000484:	4811      	ldr	r0, [pc, #68]	@ (80004cc <checkInternetConnection+0x314>)
 8000486:	f001 fbe5 	bl	8001c54 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, buffer, strlen((char *)buffer), 1000);
 800048a:	4811      	ldr	r0, [pc, #68]	@ (80004d0 <checkInternetConnection+0x318>)
 800048c:	f7ff fe5e 	bl	800014c <strlen>
 8000490:	4603      	mov	r3, r0
 8000492:	b29a      	uxth	r2, r3
 8000494:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000498:	490d      	ldr	r1, [pc, #52]	@ (80004d0 <checkInternetConnection+0x318>)
 800049a:	480c      	ldr	r0, [pc, #48]	@ (80004cc <checkInternetConnection+0x314>)
 800049c:	f001 fbda 	bl	8001c54 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 1000);
 80004a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004a4:	2202      	movs	r2, #2
 80004a6:	490b      	ldr	r1, [pc, #44]	@ (80004d4 <checkInternetConnection+0x31c>)
 80004a8:	4808      	ldr	r0, [pc, #32]	@ (80004cc <checkInternetConnection+0x314>)
 80004aa:	f001 fbd3 	bl	8001c54 <HAL_UART_Transmit>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // LED ON
 80004ae:	2200      	movs	r2, #0
 80004b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004b4:	481a      	ldr	r0, [pc, #104]	@ (8000520 <checkInternetConnection+0x368>)
 80004b6:	f000 fe11 	bl	80010dc <HAL_GPIO_WritePin>
        } else {
            HAL_UART_Transmit(&huart2, (uint8_t *)"Connection failed\r\n", 19, 1000);
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // LED OFF
        }
    }
 80004ba:	e040      	b.n	800053e <checkInternetConnection+0x386>
 80004bc:	40010800 	.word	0x40010800
 80004c0:	000249f0 	.word	0x000249f0
 80004c4:	08002ad4 	.word	0x08002ad4
 80004c8:	08002ad8 	.word	0x08002ad8
 80004cc:	20000114 	.word	0x20000114
 80004d0:	2000015c 	.word	0x2000015c
 80004d4:	08002ad0 	.word	0x08002ad0
 80004d8:	08002ae0 	.word	0x08002ae0
 80004dc:	08002ae4 	.word	0x08002ae4
 80004e0:	08002af0 	.word	0x08002af0
 80004e4:	08002af8 	.word	0x08002af8
 80004e8:	08002b08 	.word	0x08002b08
 80004ec:	08002b14 	.word	0x08002b14
 80004f0:	08002b1c 	.word	0x08002b1c
 80004f4:	08002b28 	.word	0x08002b28
 80004f8:	08002bc0 	.word	0x08002bc0
 80004fc:	08002b34 	.word	0x08002b34
 8000500:	08002b4c 	.word	0x08002b4c
 8000504:	08002b58 	.word	0x08002b58
 8000508:	08002b68 	.word	0x08002b68
 800050c:	08002b70 	.word	0x08002b70
 8000510:	08002b80 	.word	0x08002b80
 8000514:	08002b8c 	.word	0x08002b8c
 8000518:	2000025c 	.word	0x2000025c
 800051c:	08002b9c 	.word	0x08002b9c
 8000520:	40011000 	.word	0x40011000
            HAL_UART_Transmit(&huart2, (uint8_t *)"Connection failed\r\n", 19, 1000);
 8000524:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000528:	2213      	movs	r2, #19
 800052a:	4907      	ldr	r1, [pc, #28]	@ (8000548 <checkInternetConnection+0x390>)
 800052c:	4807      	ldr	r0, [pc, #28]	@ (800054c <checkInternetConnection+0x394>)
 800052e:	f001 fb91 	bl	8001c54 <HAL_UART_Transmit>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // LED OFF
 8000532:	2201      	movs	r2, #1
 8000534:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000538:	4805      	ldr	r0, [pc, #20]	@ (8000550 <checkInternetConnection+0x398>)
 800053a:	f000 fdcf 	bl	80010dc <HAL_GPIO_WritePin>
    }
 800053e:	bf00      	nop
 8000540:	3758      	adds	r7, #88	@ 0x58
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	08002bac 	.word	0x08002bac
 800054c:	20000114 	.word	0x20000114
 8000550:	40011000 	.word	0x40011000

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000558:	f000 fad2 	bl	8000b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f812 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000560:	f000 f8d8 	bl	8000714 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000564:	f000 f854 	bl	8000610 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000568:	f000 f880 	bl	800066c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800056c:	f000 f8a8 	bl	80006c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  checkInternetConnection();
 8000570:	f7ff fe22 	bl	80001b8 <checkInternetConnection>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Optionally repeat status check or add other tasks
	      HAL_Delay(10000); // Check every 10s (adjust as needed)
 8000574:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000578:	f000 fb24 	bl	8000bc4 <HAL_Delay>
	      checkInternetConnection();
 800057c:	f7ff fe1c 	bl	80001b8 <checkInternetConnection>
	      HAL_Delay(10000); // Check every 10s (adjust as needed)
 8000580:	bf00      	nop
 8000582:	e7f7      	b.n	8000574 <main+0x20>

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b090      	sub	sp, #64	@ 0x40
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0318 	add.w	r3, r7, #24
 800058e:	2228      	movs	r2, #40	@ 0x28
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f001 fdec 	bl	8002170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a6:	2301      	movs	r3, #1
 80005a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	2301      	movs	r3, #1
 80005b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b8:	2302      	movs	r3, #2
 80005ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005c2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0318 	add.w	r3, r7, #24
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 fee1 	bl	8001394 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005d8:	f000 f90a 	bl	80007f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2302      	movs	r3, #2
 80005e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2102      	movs	r1, #2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 f94e 	bl	8001898 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000602:	f000 f8f5 	bl	80007f0 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3740      	adds	r7, #64	@ 0x40
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000614:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000616:	4a13      	ldr	r2, [pc, #76]	@ (8000664 <MX_I2C1_Init+0x54>)
 8000618:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800061a:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <MX_I2C1_Init+0x50>)
 800061c:	4a12      	ldr	r2, [pc, #72]	@ (8000668 <MX_I2C1_Init+0x58>)
 800061e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000620:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000626:	4b0e      	ldr	r3, [pc, #56]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800062c:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_I2C1_Init+0x50>)
 800062e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000632:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800063a:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000646:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	@ (8000660 <MX_I2C1_Init+0x50>)
 800064e:	f000 fd5d 	bl	800110c <HAL_I2C_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000658:	f000 f8ca 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000078 	.word	0x20000078
 8000664:	40005400 	.word	0x40005400
 8000668:	000186a0 	.word	0x000186a0

0800066c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000670:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <MX_USART1_UART_Init+0x4c>)
 8000672:	4a12      	ldr	r2, [pc, #72]	@ (80006bc <MX_USART1_UART_Init+0x50>)
 8000674:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000676:	4b10      	ldr	r3, [pc, #64]	@ (80006b8 <MX_USART1_UART_Init+0x4c>)
 8000678:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800067c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800067e:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <MX_USART1_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000684:	4b0c      	ldr	r3, [pc, #48]	@ (80006b8 <MX_USART1_UART_Init+0x4c>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	@ (80006b8 <MX_USART1_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000690:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <MX_USART1_UART_Init+0x4c>)
 8000692:	220c      	movs	r2, #12
 8000694:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <MX_USART1_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800069c:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <MX_USART1_UART_Init+0x4c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <MX_USART1_UART_Init+0x4c>)
 80006a4:	f001 fa86 	bl	8001bb4 <HAL_UART_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006ae:	f000 f89f 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200000cc 	.word	0x200000cc
 80006bc:	40013800 	.word	0x40013800

080006c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <MX_USART2_UART_Init+0x4c>)
 80006c6:	4a12      	ldr	r2, [pc, #72]	@ (8000710 <MX_USART2_UART_Init+0x50>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ca:	4b10      	ldr	r3, [pc, #64]	@ (800070c <MX_USART2_UART_Init+0x4c>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <MX_USART2_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <MX_USART2_UART_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	@ (800070c <MX_USART2_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_USART2_UART_Init+0x4c>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	@ (800070c <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b06      	ldr	r3, [pc, #24]	@ (800070c <MX_USART2_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	@ (800070c <MX_USART2_UART_Init+0x4c>)
 80006f8:	f001 fa5c 	bl	8001bb4 <HAL_UART_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000702:	f000 f875 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000114 	.word	0x20000114
 8000710:	40004400 	.word	0x40004400

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 0310 	add.w	r3, r7, #16
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000728:	4b2e      	ldr	r3, [pc, #184]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a2d      	ldr	r2, [pc, #180]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 800072e:	f043 0310 	orr.w	r3, r3, #16
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b2b      	ldr	r3, [pc, #172]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f003 0310 	and.w	r3, r3, #16
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000740:	4b28      	ldr	r3, [pc, #160]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a27      	ldr	r2, [pc, #156]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 8000746:	f043 0320 	orr.w	r3, r3, #32
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b25      	ldr	r3, [pc, #148]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0320 	and.w	r3, r3, #32
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000758:	4b22      	ldr	r3, [pc, #136]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a21      	ldr	r2, [pc, #132]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 800075e:	f043 0304 	orr.w	r3, r3, #4
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b1f      	ldr	r3, [pc, #124]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0304 	and.w	r3, r3, #4
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000770:	4b1c      	ldr	r3, [pc, #112]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a1b      	ldr	r2, [pc, #108]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 8000776:	f043 0308 	orr.w	r3, r3, #8
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b19      	ldr	r3, [pc, #100]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f003 0308 	and.w	r3, r3, #8
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800078e:	4816      	ldr	r0, [pc, #88]	@ (80007e8 <MX_GPIO_Init+0xd4>)
 8000790:	f000 fca4 	bl	80010dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800079a:	4814      	ldr	r0, [pc, #80]	@ (80007ec <MX_GPIO_Init+0xd8>)
 800079c:	f000 fc9e 	bl	80010dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2302      	movs	r3, #2
 80007b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	4619      	mov	r1, r3
 80007b8:	480b      	ldr	r0, [pc, #44]	@ (80007e8 <MX_GPIO_Init+0xd4>)
 80007ba:	f000 fb0b 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2302      	movs	r3, #2
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	4619      	mov	r1, r3
 80007d6:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_GPIO_Init+0xd8>)
 80007d8:	f000 fafc 	bl	8000dd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007dc:	bf00      	nop
 80007de:	3720      	adds	r7, #32
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40011000 	.word	0x40011000
 80007ec:	40010800 	.word	0x40010800

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <Error_Handler+0x8>

080007fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000802:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <HAL_MspInit+0x5c>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	4a14      	ldr	r2, [pc, #80]	@ (8000858 <HAL_MspInit+0x5c>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6193      	str	r3, [r2, #24]
 800080e:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <HAL_MspInit+0x5c>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <HAL_MspInit+0x5c>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	4a0e      	ldr	r2, [pc, #56]	@ (8000858 <HAL_MspInit+0x5c>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000824:	61d3      	str	r3, [r2, #28]
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <HAL_MspInit+0x5c>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000832:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <HAL_MspInit+0x60>)
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	4a04      	ldr	r2, [pc, #16]	@ (800085c <HAL_MspInit+0x60>)
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	bf00      	nop
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	40021000 	.word	0x40021000
 800085c:	40010000 	.word	0x40010000

08000860 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a15      	ldr	r2, [pc, #84]	@ (80008d0 <HAL_I2C_MspInit+0x70>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d123      	bne.n	80008c8 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000880:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <HAL_I2C_MspInit+0x74>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a13      	ldr	r2, [pc, #76]	@ (80008d4 <HAL_I2C_MspInit+0x74>)
 8000886:	f043 0308 	orr.w	r3, r3, #8
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <HAL_I2C_MspInit+0x74>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f003 0308 	and.w	r3, r3, #8
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000898:	23c0      	movs	r3, #192	@ 0xc0
 800089a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800089c:	2312      	movs	r3, #18
 800089e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a0:	2303      	movs	r3, #3
 80008a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	4619      	mov	r1, r3
 80008aa:	480b      	ldr	r0, [pc, #44]	@ (80008d8 <HAL_I2C_MspInit+0x78>)
 80008ac:	f000 fa92 	bl	8000dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008b0:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <HAL_I2C_MspInit+0x74>)
 80008b2:	69db      	ldr	r3, [r3, #28]
 80008b4:	4a07      	ldr	r2, [pc, #28]	@ (80008d4 <HAL_I2C_MspInit+0x74>)
 80008b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008ba:	61d3      	str	r3, [r2, #28]
 80008bc:	4b05      	ldr	r3, [pc, #20]	@ (80008d4 <HAL_I2C_MspInit+0x74>)
 80008be:	69db      	ldr	r3, [r3, #28]
 80008c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80008c8:	bf00      	nop
 80008ca:	3720      	adds	r7, #32
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40005400 	.word	0x40005400
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40010c00 	.word	0x40010c00

080008dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	@ 0x28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 0318 	add.w	r3, r7, #24
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a37      	ldr	r2, [pc, #220]	@ (80009d4 <HAL_UART_MspInit+0xf8>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d132      	bne.n	8000962 <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008fc:	4b36      	ldr	r3, [pc, #216]	@ (80009d8 <HAL_UART_MspInit+0xfc>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a35      	ldr	r2, [pc, #212]	@ (80009d8 <HAL_UART_MspInit+0xfc>)
 8000902:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b33      	ldr	r3, [pc, #204]	@ (80009d8 <HAL_UART_MspInit+0xfc>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000914:	4b30      	ldr	r3, [pc, #192]	@ (80009d8 <HAL_UART_MspInit+0xfc>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a2f      	ldr	r2, [pc, #188]	@ (80009d8 <HAL_UART_MspInit+0xfc>)
 800091a:	f043 0304 	orr.w	r3, r3, #4
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b2d      	ldr	r3, [pc, #180]	@ (80009d8 <HAL_UART_MspInit+0xfc>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800092c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000936:	2303      	movs	r3, #3
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 0318 	add.w	r3, r7, #24
 800093e:	4619      	mov	r1, r3
 8000940:	4826      	ldr	r0, [pc, #152]	@ (80009dc <HAL_UART_MspInit+0x100>)
 8000942:	f000 fa47 	bl	8000dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000946:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800094a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 0318 	add.w	r3, r7, #24
 8000958:	4619      	mov	r1, r3
 800095a:	4820      	ldr	r0, [pc, #128]	@ (80009dc <HAL_UART_MspInit+0x100>)
 800095c:	f000 fa3a 	bl	8000dd4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000960:	e034      	b.n	80009cc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a1e      	ldr	r2, [pc, #120]	@ (80009e0 <HAL_UART_MspInit+0x104>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d12f      	bne.n	80009cc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800096c:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <HAL_UART_MspInit+0xfc>)
 800096e:	69db      	ldr	r3, [r3, #28]
 8000970:	4a19      	ldr	r2, [pc, #100]	@ (80009d8 <HAL_UART_MspInit+0xfc>)
 8000972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000976:	61d3      	str	r3, [r2, #28]
 8000978:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <HAL_UART_MspInit+0xfc>)
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000984:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <HAL_UART_MspInit+0xfc>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a13      	ldr	r2, [pc, #76]	@ (80009d8 <HAL_UART_MspInit+0xfc>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <HAL_UART_MspInit+0xfc>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800099c:	2304      	movs	r3, #4
 800099e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a4:	2303      	movs	r3, #3
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	f107 0318 	add.w	r3, r7, #24
 80009ac:	4619      	mov	r1, r3
 80009ae:	480b      	ldr	r0, [pc, #44]	@ (80009dc <HAL_UART_MspInit+0x100>)
 80009b0:	f000 fa10 	bl	8000dd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009b4:	2308      	movs	r3, #8
 80009b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	f107 0318 	add.w	r3, r7, #24
 80009c4:	4619      	mov	r1, r3
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <HAL_UART_MspInit+0x100>)
 80009c8:	f000 fa04 	bl	8000dd4 <HAL_GPIO_Init>
}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	@ 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40013800 	.word	0x40013800
 80009d8:	40021000 	.word	0x40021000
 80009dc:	40010800 	.word	0x40010800
 80009e0:	40004400 	.word	0x40004400

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <NMI_Handler+0x4>

080009ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <MemManage_Handler+0x4>

080009fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <BusFault_Handler+0x4>

08000a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <UsageFault_Handler+0x4>

08000a0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a34:	f000 f8aa 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a44:	4a14      	ldr	r2, [pc, #80]	@ (8000a98 <_sbrk+0x5c>)
 8000a46:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <_sbrk+0x60>)
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a50:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <_sbrk+0x64>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d102      	bne.n	8000a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a58:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <_sbrk+0x64>)
 8000a5a:	4a12      	ldr	r2, [pc, #72]	@ (8000aa4 <_sbrk+0x68>)
 8000a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a5e:	4b10      	ldr	r3, [pc, #64]	@ (8000aa0 <_sbrk+0x64>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d207      	bcs.n	8000a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a6c:	f001 fb9e 	bl	80021ac <__errno>
 8000a70:	4603      	mov	r3, r0
 8000a72:	220c      	movs	r2, #12
 8000a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7a:	e009      	b.n	8000a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a7c:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <_sbrk+0x64>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a82:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <_sbrk+0x64>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	4a05      	ldr	r2, [pc, #20]	@ (8000aa0 <_sbrk+0x64>)
 8000a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20005000 	.word	0x20005000
 8000a9c:	00000400 	.word	0x00000400
 8000aa0:	20000260 	.word	0x20000260
 8000aa4:	200003b0 	.word	0x200003b0

08000aa8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ab4:	f7ff fff8 	bl	8000aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab8:	480b      	ldr	r0, [pc, #44]	@ (8000ae8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aba:	490c      	ldr	r1, [pc, #48]	@ (8000aec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000abc:	4a0c      	ldr	r2, [pc, #48]	@ (8000af0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac0:	e002      	b.n	8000ac8 <LoopCopyDataInit>

08000ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac6:	3304      	adds	r3, #4

08000ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000acc:	d3f9      	bcc.n	8000ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ace:	4a09      	ldr	r2, [pc, #36]	@ (8000af4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ad0:	4c09      	ldr	r4, [pc, #36]	@ (8000af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad4:	e001      	b.n	8000ada <LoopFillZerobss>

08000ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad8:	3204      	adds	r2, #4

08000ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000adc:	d3fb      	bcc.n	8000ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ade:	f001 fb6b 	bl	80021b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ae2:	f7ff fd37 	bl	8000554 <main>
  bx lr
 8000ae6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000af0:	08002c3c 	.word	0x08002c3c
  ldr r2, =_sbss
 8000af4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000af8:	200003b0 	.word	0x200003b0

08000afc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC1_2_IRQHandler>
	...

08000b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <HAL_Init+0x28>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	@ (8000b28 <HAL_Init+0x28>)
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f92b 	bl	8000d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	200f      	movs	r0, #15
 8000b18:	f000 f808 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f7ff fe6e 	bl	80007fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40022000 	.word	0x40022000

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b34:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <HAL_InitTick+0x54>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <HAL_InitTick+0x58>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f935 	bl	8000dba <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00e      	b.n	8000b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d80a      	bhi.n	8000b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f000 f90b 	bl	8000d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4a06      	ldr	r2, [pc, #24]	@ (8000b88 <HAL_InitTick+0x5c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b05      	ldr	r3, [pc, #20]	@ (8000ba8 <HAL_IncTick+0x1c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <HAL_IncTick+0x20>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a03      	ldr	r2, [pc, #12]	@ (8000bac <HAL_IncTick+0x20>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000264 	.word	0x20000264

08000bb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb4:	4b02      	ldr	r3, [pc, #8]	@ (8000bc0 <HAL_GetTick+0x10>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	20000264 	.word	0x20000264

08000bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bcc:	f7ff fff0 	bl	8000bb0 <HAL_GetTick>
 8000bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bdc:	d005      	beq.n	8000bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bde:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <HAL_Delay+0x44>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4413      	add	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bea:	bf00      	nop
 8000bec:	f7ff ffe0 	bl	8000bb0 <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d8f7      	bhi.n	8000bec <HAL_Delay+0x28>
  {
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008

08000c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	@ (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	60d3      	str	r3, [r2, #12]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	@ (8000c6c <__NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	@ (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	@ (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	@ 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	@ 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d38:	d301      	bcc.n	8000d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00f      	b.n	8000d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d68 <SysTick_Config+0x40>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d46:	210f      	movs	r1, #15
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f7ff ff90 	bl	8000c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <SysTick_Config+0x40>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d56:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <SysTick_Config+0x40>)
 8000d58:	2207      	movs	r2, #7
 8000d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	e000e010 	.word	0xe000e010

08000d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ff49 	bl	8000c0c <__NVIC_SetPriorityGrouping>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d94:	f7ff ff5e 	bl	8000c54 <__NVIC_GetPriorityGrouping>
 8000d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	68b9      	ldr	r1, [r7, #8]
 8000d9e:	6978      	ldr	r0, [r7, #20]
 8000da0:	f7ff ff90 	bl	8000cc4 <NVIC_EncodePriority>
 8000da4:	4602      	mov	r2, r0
 8000da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff5f 	bl	8000c70 <__NVIC_SetPriority>
}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ffb0 	bl	8000d28 <SysTick_Config>
 8000dc8:	4603      	mov	r3, r0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b08b      	sub	sp, #44	@ 0x2c
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de6:	e169      	b.n	80010bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000de8:	2201      	movs	r2, #1
 8000dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	69fa      	ldr	r2, [r7, #28]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	f040 8158 	bne.w	80010b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	4a9a      	ldr	r2, [pc, #616]	@ (8001074 <HAL_GPIO_Init+0x2a0>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d05e      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e10:	4a98      	ldr	r2, [pc, #608]	@ (8001074 <HAL_GPIO_Init+0x2a0>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d875      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e16:	4a98      	ldr	r2, [pc, #608]	@ (8001078 <HAL_GPIO_Init+0x2a4>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d058      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e1c:	4a96      	ldr	r2, [pc, #600]	@ (8001078 <HAL_GPIO_Init+0x2a4>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d86f      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e22:	4a96      	ldr	r2, [pc, #600]	@ (800107c <HAL_GPIO_Init+0x2a8>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d052      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e28:	4a94      	ldr	r2, [pc, #592]	@ (800107c <HAL_GPIO_Init+0x2a8>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d869      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e2e:	4a94      	ldr	r2, [pc, #592]	@ (8001080 <HAL_GPIO_Init+0x2ac>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d04c      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e34:	4a92      	ldr	r2, [pc, #584]	@ (8001080 <HAL_GPIO_Init+0x2ac>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d863      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e3a:	4a92      	ldr	r2, [pc, #584]	@ (8001084 <HAL_GPIO_Init+0x2b0>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d046      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e40:	4a90      	ldr	r2, [pc, #576]	@ (8001084 <HAL_GPIO_Init+0x2b0>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d85d      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e46:	2b12      	cmp	r3, #18
 8000e48:	d82a      	bhi.n	8000ea0 <HAL_GPIO_Init+0xcc>
 8000e4a:	2b12      	cmp	r3, #18
 8000e4c:	d859      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e54 <HAL_GPIO_Init+0x80>)
 8000e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e54:	08000ecf 	.word	0x08000ecf
 8000e58:	08000ea9 	.word	0x08000ea9
 8000e5c:	08000ebb 	.word	0x08000ebb
 8000e60:	08000efd 	.word	0x08000efd
 8000e64:	08000f03 	.word	0x08000f03
 8000e68:	08000f03 	.word	0x08000f03
 8000e6c:	08000f03 	.word	0x08000f03
 8000e70:	08000f03 	.word	0x08000f03
 8000e74:	08000f03 	.word	0x08000f03
 8000e78:	08000f03 	.word	0x08000f03
 8000e7c:	08000f03 	.word	0x08000f03
 8000e80:	08000f03 	.word	0x08000f03
 8000e84:	08000f03 	.word	0x08000f03
 8000e88:	08000f03 	.word	0x08000f03
 8000e8c:	08000f03 	.word	0x08000f03
 8000e90:	08000f03 	.word	0x08000f03
 8000e94:	08000f03 	.word	0x08000f03
 8000e98:	08000eb1 	.word	0x08000eb1
 8000e9c:	08000ec5 	.word	0x08000ec5
 8000ea0:	4a79      	ldr	r2, [pc, #484]	@ (8001088 <HAL_GPIO_Init+0x2b4>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d013      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ea6:	e02c      	b.n	8000f02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	623b      	str	r3, [r7, #32]
          break;
 8000eae:	e029      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	623b      	str	r3, [r7, #32]
          break;
 8000eb8:	e024      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	3308      	adds	r3, #8
 8000ec0:	623b      	str	r3, [r7, #32]
          break;
 8000ec2:	e01f      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	330c      	adds	r3, #12
 8000eca:	623b      	str	r3, [r7, #32]
          break;
 8000ecc:	e01a      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d102      	bne.n	8000edc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	623b      	str	r3, [r7, #32]
          break;
 8000eda:	e013      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d105      	bne.n	8000ef0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ee4:	2308      	movs	r3, #8
 8000ee6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69fa      	ldr	r2, [r7, #28]
 8000eec:	611a      	str	r2, [r3, #16]
          break;
 8000eee:	e009      	b.n	8000f04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69fa      	ldr	r2, [r7, #28]
 8000ef8:	615a      	str	r2, [r3, #20]
          break;
 8000efa:	e003      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]
          break;
 8000f00:	e000      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          break;
 8000f02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	2bff      	cmp	r3, #255	@ 0xff
 8000f08:	d801      	bhi.n	8000f0e <HAL_GPIO_Init+0x13a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	e001      	b.n	8000f12 <HAL_GPIO_Init+0x13e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3304      	adds	r3, #4
 8000f12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	2bff      	cmp	r3, #255	@ 0xff
 8000f18:	d802      	bhi.n	8000f20 <HAL_GPIO_Init+0x14c>
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	e002      	b.n	8000f26 <HAL_GPIO_Init+0x152>
 8000f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f22:	3b08      	subs	r3, #8
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	210f      	movs	r1, #15
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	fa01 f303 	lsl.w	r3, r1, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	401a      	ands	r2, r3
 8000f38:	6a39      	ldr	r1, [r7, #32]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f40:	431a      	orrs	r2, r3
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 80b1 	beq.w	80010b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f54:	4b4d      	ldr	r3, [pc, #308]	@ (800108c <HAL_GPIO_Init+0x2b8>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a4c      	ldr	r2, [pc, #304]	@ (800108c <HAL_GPIO_Init+0x2b8>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b4a      	ldr	r3, [pc, #296]	@ (800108c <HAL_GPIO_Init+0x2b8>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f6c:	4a48      	ldr	r2, [pc, #288]	@ (8001090 <HAL_GPIO_Init+0x2bc>)
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a40      	ldr	r2, [pc, #256]	@ (8001094 <HAL_GPIO_Init+0x2c0>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d013      	beq.n	8000fc0 <HAL_GPIO_Init+0x1ec>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a3f      	ldr	r2, [pc, #252]	@ (8001098 <HAL_GPIO_Init+0x2c4>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d00d      	beq.n	8000fbc <HAL_GPIO_Init+0x1e8>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a3e      	ldr	r2, [pc, #248]	@ (800109c <HAL_GPIO_Init+0x2c8>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d007      	beq.n	8000fb8 <HAL_GPIO_Init+0x1e4>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a3d      	ldr	r2, [pc, #244]	@ (80010a0 <HAL_GPIO_Init+0x2cc>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d101      	bne.n	8000fb4 <HAL_GPIO_Init+0x1e0>
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e006      	b.n	8000fc2 <HAL_GPIO_Init+0x1ee>
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	e004      	b.n	8000fc2 <HAL_GPIO_Init+0x1ee>
 8000fb8:	2302      	movs	r3, #2
 8000fba:	e002      	b.n	8000fc2 <HAL_GPIO_Init+0x1ee>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e000      	b.n	8000fc2 <HAL_GPIO_Init+0x1ee>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fc4:	f002 0203 	and.w	r2, r2, #3
 8000fc8:	0092      	lsls	r2, r2, #2
 8000fca:	4093      	lsls	r3, r2
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fd2:	492f      	ldr	r1, [pc, #188]	@ (8001090 <HAL_GPIO_Init+0x2bc>)
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3302      	adds	r3, #2
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d006      	beq.n	8000ffa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fec:	4b2d      	ldr	r3, [pc, #180]	@ (80010a4 <HAL_GPIO_Init+0x2d0>)
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	492c      	ldr	r1, [pc, #176]	@ (80010a4 <HAL_GPIO_Init+0x2d0>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	608b      	str	r3, [r1, #8]
 8000ff8:	e006      	b.n	8001008 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ffa:	4b2a      	ldr	r3, [pc, #168]	@ (80010a4 <HAL_GPIO_Init+0x2d0>)
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	43db      	mvns	r3, r3
 8001002:	4928      	ldr	r1, [pc, #160]	@ (80010a4 <HAL_GPIO_Init+0x2d0>)
 8001004:	4013      	ands	r3, r2
 8001006:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d006      	beq.n	8001022 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001014:	4b23      	ldr	r3, [pc, #140]	@ (80010a4 <HAL_GPIO_Init+0x2d0>)
 8001016:	68da      	ldr	r2, [r3, #12]
 8001018:	4922      	ldr	r1, [pc, #136]	@ (80010a4 <HAL_GPIO_Init+0x2d0>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	60cb      	str	r3, [r1, #12]
 8001020:	e006      	b.n	8001030 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001022:	4b20      	ldr	r3, [pc, #128]	@ (80010a4 <HAL_GPIO_Init+0x2d0>)
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	43db      	mvns	r3, r3
 800102a:	491e      	ldr	r1, [pc, #120]	@ (80010a4 <HAL_GPIO_Init+0x2d0>)
 800102c:	4013      	ands	r3, r2
 800102e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d006      	beq.n	800104a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800103c:	4b19      	ldr	r3, [pc, #100]	@ (80010a4 <HAL_GPIO_Init+0x2d0>)
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	4918      	ldr	r1, [pc, #96]	@ (80010a4 <HAL_GPIO_Init+0x2d0>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	604b      	str	r3, [r1, #4]
 8001048:	e006      	b.n	8001058 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800104a:	4b16      	ldr	r3, [pc, #88]	@ (80010a4 <HAL_GPIO_Init+0x2d0>)
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	43db      	mvns	r3, r3
 8001052:	4914      	ldr	r1, [pc, #80]	@ (80010a4 <HAL_GPIO_Init+0x2d0>)
 8001054:	4013      	ands	r3, r2
 8001056:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d021      	beq.n	80010a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001064:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <HAL_GPIO_Init+0x2d0>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	490e      	ldr	r1, [pc, #56]	@ (80010a4 <HAL_GPIO_Init+0x2d0>)
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	600b      	str	r3, [r1, #0]
 8001070:	e021      	b.n	80010b6 <HAL_GPIO_Init+0x2e2>
 8001072:	bf00      	nop
 8001074:	10320000 	.word	0x10320000
 8001078:	10310000 	.word	0x10310000
 800107c:	10220000 	.word	0x10220000
 8001080:	10210000 	.word	0x10210000
 8001084:	10120000 	.word	0x10120000
 8001088:	10110000 	.word	0x10110000
 800108c:	40021000 	.word	0x40021000
 8001090:	40010000 	.word	0x40010000
 8001094:	40010800 	.word	0x40010800
 8001098:	40010c00 	.word	0x40010c00
 800109c:	40011000 	.word	0x40011000
 80010a0:	40011400 	.word	0x40011400
 80010a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010a8:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <HAL_GPIO_Init+0x304>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	4909      	ldr	r1, [pc, #36]	@ (80010d8 <HAL_GPIO_Init+0x304>)
 80010b2:	4013      	ands	r3, r2
 80010b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b8:	3301      	adds	r3, #1
 80010ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c2:	fa22 f303 	lsr.w	r3, r2, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f47f ae8e 	bne.w	8000de8 <HAL_GPIO_Init+0x14>
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	372c      	adds	r7, #44	@ 0x2c
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	40010400 	.word	0x40010400

080010dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
 80010e8:	4613      	mov	r3, r2
 80010ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010ec:	787b      	ldrb	r3, [r7, #1]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010f2:	887a      	ldrh	r2, [r7, #2]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010f8:	e003      	b.n	8001102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010fa:	887b      	ldrh	r3, [r7, #2]
 80010fc:	041a      	lsls	r2, r3, #16
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	611a      	str	r2, [r3, #16]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e12b      	b.n	8001376 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d106      	bne.n	8001138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff fb94 	bl	8000860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2224      	movs	r2, #36	@ 0x24
 800113c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 0201 	bic.w	r2, r2, #1
 800114e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800115e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800116e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001170:	f000 fcda 	bl	8001b28 <HAL_RCC_GetPCLK1Freq>
 8001174:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	4a81      	ldr	r2, [pc, #516]	@ (8001380 <HAL_I2C_Init+0x274>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d807      	bhi.n	8001190 <HAL_I2C_Init+0x84>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4a80      	ldr	r2, [pc, #512]	@ (8001384 <HAL_I2C_Init+0x278>)
 8001184:	4293      	cmp	r3, r2
 8001186:	bf94      	ite	ls
 8001188:	2301      	movls	r3, #1
 800118a:	2300      	movhi	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	e006      	b.n	800119e <HAL_I2C_Init+0x92>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4a7d      	ldr	r2, [pc, #500]	@ (8001388 <HAL_I2C_Init+0x27c>)
 8001194:	4293      	cmp	r3, r2
 8001196:	bf94      	ite	ls
 8001198:	2301      	movls	r3, #1
 800119a:	2300      	movhi	r3, #0
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e0e7      	b.n	8001376 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4a78      	ldr	r2, [pc, #480]	@ (800138c <HAL_I2C_Init+0x280>)
 80011aa:	fba2 2303 	umull	r2, r3, r2, r3
 80011ae:	0c9b      	lsrs	r3, r3, #18
 80011b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	430a      	orrs	r2, r1
 80011c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	4a6a      	ldr	r2, [pc, #424]	@ (8001380 <HAL_I2C_Init+0x274>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d802      	bhi.n	80011e0 <HAL_I2C_Init+0xd4>
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	3301      	adds	r3, #1
 80011de:	e009      	b.n	80011f4 <HAL_I2C_Init+0xe8>
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011e6:	fb02 f303 	mul.w	r3, r2, r3
 80011ea:	4a69      	ldr	r2, [pc, #420]	@ (8001390 <HAL_I2C_Init+0x284>)
 80011ec:	fba2 2303 	umull	r2, r3, r2, r3
 80011f0:	099b      	lsrs	r3, r3, #6
 80011f2:	3301      	adds	r3, #1
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	6812      	ldr	r2, [r2, #0]
 80011f8:	430b      	orrs	r3, r1
 80011fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001206:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	495c      	ldr	r1, [pc, #368]	@ (8001380 <HAL_I2C_Init+0x274>)
 8001210:	428b      	cmp	r3, r1
 8001212:	d819      	bhi.n	8001248 <HAL_I2C_Init+0x13c>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	1e59      	subs	r1, r3, #1
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001222:	1c59      	adds	r1, r3, #1
 8001224:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001228:	400b      	ands	r3, r1
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00a      	beq.n	8001244 <HAL_I2C_Init+0x138>
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1e59      	subs	r1, r3, #1
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fbb1 f3f3 	udiv	r3, r1, r3
 800123c:	3301      	adds	r3, #1
 800123e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001242:	e051      	b.n	80012e8 <HAL_I2C_Init+0x1dc>
 8001244:	2304      	movs	r3, #4
 8001246:	e04f      	b.n	80012e8 <HAL_I2C_Init+0x1dc>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d111      	bne.n	8001274 <HAL_I2C_Init+0x168>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	1e58      	subs	r0, r3, #1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6859      	ldr	r1, [r3, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	440b      	add	r3, r1
 800125e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001262:	3301      	adds	r3, #1
 8001264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001268:	2b00      	cmp	r3, #0
 800126a:	bf0c      	ite	eq
 800126c:	2301      	moveq	r3, #1
 800126e:	2300      	movne	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	e012      	b.n	800129a <HAL_I2C_Init+0x18e>
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	1e58      	subs	r0, r3, #1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6859      	ldr	r1, [r3, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	0099      	lsls	r1, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	fbb0 f3f3 	udiv	r3, r0, r3
 800128a:	3301      	adds	r3, #1
 800128c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001290:	2b00      	cmp	r3, #0
 8001292:	bf0c      	ite	eq
 8001294:	2301      	moveq	r3, #1
 8001296:	2300      	movne	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_I2C_Init+0x196>
 800129e:	2301      	movs	r3, #1
 80012a0:	e022      	b.n	80012e8 <HAL_I2C_Init+0x1dc>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10e      	bne.n	80012c8 <HAL_I2C_Init+0x1bc>
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	1e58      	subs	r0, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6859      	ldr	r1, [r3, #4]
 80012b2:	460b      	mov	r3, r1
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	440b      	add	r3, r1
 80012b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80012bc:	3301      	adds	r3, #1
 80012be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012c6:	e00f      	b.n	80012e8 <HAL_I2C_Init+0x1dc>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	1e58      	subs	r0, r3, #1
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6859      	ldr	r1, [r3, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	0099      	lsls	r1, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	fbb0 f3f3 	udiv	r3, r0, r3
 80012de:	3301      	adds	r3, #1
 80012e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	6809      	ldr	r1, [r1, #0]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69da      	ldr	r2, [r3, #28]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	431a      	orrs	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001316:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	6911      	ldr	r1, [r2, #16]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68d2      	ldr	r2, [r2, #12]
 8001322:	4311      	orrs	r1, r2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	430b      	orrs	r3, r1
 800132a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695a      	ldr	r2, [r3, #20]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f042 0201 	orr.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2220      	movs	r2, #32
 8001362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	000186a0 	.word	0x000186a0
 8001384:	001e847f 	.word	0x001e847f
 8001388:	003d08ff 	.word	0x003d08ff
 800138c:	431bde83 	.word	0x431bde83
 8001390:	10624dd3 	.word	0x10624dd3

08001394 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e272      	b.n	800188c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 8087 	beq.w	80014c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013b4:	4b92      	ldr	r3, [pc, #584]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 030c 	and.w	r3, r3, #12
 80013bc:	2b04      	cmp	r3, #4
 80013be:	d00c      	beq.n	80013da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013c0:	4b8f      	ldr	r3, [pc, #572]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 030c 	and.w	r3, r3, #12
 80013c8:	2b08      	cmp	r3, #8
 80013ca:	d112      	bne.n	80013f2 <HAL_RCC_OscConfig+0x5e>
 80013cc:	4b8c      	ldr	r3, [pc, #560]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013d8:	d10b      	bne.n	80013f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013da:	4b89      	ldr	r3, [pc, #548]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d06c      	beq.n	80014c0 <HAL_RCC_OscConfig+0x12c>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d168      	bne.n	80014c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e24c      	b.n	800188c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013fa:	d106      	bne.n	800140a <HAL_RCC_OscConfig+0x76>
 80013fc:	4b80      	ldr	r3, [pc, #512]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a7f      	ldr	r2, [pc, #508]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 8001402:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	e02e      	b.n	8001468 <HAL_RCC_OscConfig+0xd4>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10c      	bne.n	800142c <HAL_RCC_OscConfig+0x98>
 8001412:	4b7b      	ldr	r3, [pc, #492]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a7a      	ldr	r2, [pc, #488]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 8001418:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	4b78      	ldr	r3, [pc, #480]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a77      	ldr	r2, [pc, #476]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 8001424:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	e01d      	b.n	8001468 <HAL_RCC_OscConfig+0xd4>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001434:	d10c      	bne.n	8001450 <HAL_RCC_OscConfig+0xbc>
 8001436:	4b72      	ldr	r3, [pc, #456]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a71      	ldr	r2, [pc, #452]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 800143c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	4b6f      	ldr	r3, [pc, #444]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a6e      	ldr	r2, [pc, #440]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 8001448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	e00b      	b.n	8001468 <HAL_RCC_OscConfig+0xd4>
 8001450:	4b6b      	ldr	r3, [pc, #428]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a6a      	ldr	r2, [pc, #424]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 8001456:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b68      	ldr	r3, [pc, #416]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a67      	ldr	r2, [pc, #412]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 8001462:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001466:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d013      	beq.n	8001498 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff fb9e 	bl	8000bb0 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001478:	f7ff fb9a 	bl	8000bb0 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b64      	cmp	r3, #100	@ 0x64
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e200      	b.n	800188c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148a:	4b5d      	ldr	r3, [pc, #372]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0xe4>
 8001496:	e014      	b.n	80014c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fb8a 	bl	8000bb0 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff fb86 	bl	8000bb0 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	@ 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e1ec      	b.n	800188c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b2:	4b53      	ldr	r3, [pc, #332]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x10c>
 80014be:	e000      	b.n	80014c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d063      	beq.n	8001596 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ce:	4b4c      	ldr	r3, [pc, #304]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00b      	beq.n	80014f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014da:	4b49      	ldr	r3, [pc, #292]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	2b08      	cmp	r3, #8
 80014e4:	d11c      	bne.n	8001520 <HAL_RCC_OscConfig+0x18c>
 80014e6:	4b46      	ldr	r3, [pc, #280]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d116      	bne.n	8001520 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f2:	4b43      	ldr	r3, [pc, #268]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d005      	beq.n	800150a <HAL_RCC_OscConfig+0x176>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d001      	beq.n	800150a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e1c0      	b.n	800188c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150a:	4b3d      	ldr	r3, [pc, #244]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	4939      	ldr	r1, [pc, #228]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 800151a:	4313      	orrs	r3, r2
 800151c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151e:	e03a      	b.n	8001596 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d020      	beq.n	800156a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001528:	4b36      	ldr	r3, [pc, #216]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 800152a:	2201      	movs	r2, #1
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152e:	f7ff fb3f 	bl	8000bb0 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001536:	f7ff fb3b 	bl	8000bb0 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e1a1      	b.n	800188c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001548:	4b2d      	ldr	r3, [pc, #180]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0f0      	beq.n	8001536 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001554:	4b2a      	ldr	r3, [pc, #168]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4927      	ldr	r1, [pc, #156]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 8001564:	4313      	orrs	r3, r2
 8001566:	600b      	str	r3, [r1, #0]
 8001568:	e015      	b.n	8001596 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800156a:	4b26      	ldr	r3, [pc, #152]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff fb1e 	bl	8000bb0 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001578:	f7ff fb1a 	bl	8000bb0 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e180      	b.n	800188c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158a:	4b1d      	ldr	r3, [pc, #116]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d03a      	beq.n	8001618 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d019      	beq.n	80015de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015aa:	4b17      	ldr	r3, [pc, #92]	@ (8001608 <HAL_RCC_OscConfig+0x274>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b0:	f7ff fafe 	bl	8000bb0 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b8:	f7ff fafa 	bl	8000bb0 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e160      	b.n	800188c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001600 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015d6:	2001      	movs	r0, #1
 80015d8:	f000 face 	bl	8001b78 <RCC_Delay>
 80015dc:	e01c      	b.n	8001618 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015de:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <HAL_RCC_OscConfig+0x274>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e4:	f7ff fae4 	bl	8000bb0 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ea:	e00f      	b.n	800160c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ec:	f7ff fae0 	bl	8000bb0 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d908      	bls.n	800160c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e146      	b.n	800188c <HAL_RCC_OscConfig+0x4f8>
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000
 8001604:	42420000 	.word	0x42420000
 8001608:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160c:	4b92      	ldr	r3, [pc, #584]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 800160e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1e9      	bne.n	80015ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 80a6 	beq.w	8001772 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800162a:	4b8b      	ldr	r3, [pc, #556]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10d      	bne.n	8001652 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	4b88      	ldr	r3, [pc, #544]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	4a87      	ldr	r2, [pc, #540]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 800163c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001640:	61d3      	str	r3, [r2, #28]
 8001642:	4b85      	ldr	r3, [pc, #532]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800164e:	2301      	movs	r3, #1
 8001650:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001652:	4b82      	ldr	r3, [pc, #520]	@ (800185c <HAL_RCC_OscConfig+0x4c8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800165a:	2b00      	cmp	r3, #0
 800165c:	d118      	bne.n	8001690 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800165e:	4b7f      	ldr	r3, [pc, #508]	@ (800185c <HAL_RCC_OscConfig+0x4c8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a7e      	ldr	r2, [pc, #504]	@ (800185c <HAL_RCC_OscConfig+0x4c8>)
 8001664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166a:	f7ff faa1 	bl	8000bb0 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001672:	f7ff fa9d 	bl	8000bb0 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b64      	cmp	r3, #100	@ 0x64
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e103      	b.n	800188c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001684:	4b75      	ldr	r3, [pc, #468]	@ (800185c <HAL_RCC_OscConfig+0x4c8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f0      	beq.n	8001672 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d106      	bne.n	80016a6 <HAL_RCC_OscConfig+0x312>
 8001698:	4b6f      	ldr	r3, [pc, #444]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	4a6e      	ldr	r2, [pc, #440]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6213      	str	r3, [r2, #32]
 80016a4:	e02d      	b.n	8001702 <HAL_RCC_OscConfig+0x36e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10c      	bne.n	80016c8 <HAL_RCC_OscConfig+0x334>
 80016ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	4a69      	ldr	r2, [pc, #420]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	6213      	str	r3, [r2, #32]
 80016ba:	4b67      	ldr	r3, [pc, #412]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	4a66      	ldr	r2, [pc, #408]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	f023 0304 	bic.w	r3, r3, #4
 80016c4:	6213      	str	r3, [r2, #32]
 80016c6:	e01c      	b.n	8001702 <HAL_RCC_OscConfig+0x36e>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	2b05      	cmp	r3, #5
 80016ce:	d10c      	bne.n	80016ea <HAL_RCC_OscConfig+0x356>
 80016d0:	4b61      	ldr	r3, [pc, #388]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	4a60      	ldr	r2, [pc, #384]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 80016d6:	f043 0304 	orr.w	r3, r3, #4
 80016da:	6213      	str	r3, [r2, #32]
 80016dc:	4b5e      	ldr	r3, [pc, #376]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	4a5d      	ldr	r2, [pc, #372]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	6213      	str	r3, [r2, #32]
 80016e8:	e00b      	b.n	8001702 <HAL_RCC_OscConfig+0x36e>
 80016ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	4a5a      	ldr	r2, [pc, #360]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	f023 0301 	bic.w	r3, r3, #1
 80016f4:	6213      	str	r3, [r2, #32]
 80016f6:	4b58      	ldr	r3, [pc, #352]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	4a57      	ldr	r2, [pc, #348]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	f023 0304 	bic.w	r3, r3, #4
 8001700:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d015      	beq.n	8001736 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170a:	f7ff fa51 	bl	8000bb0 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001710:	e00a      	b.n	8001728 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001712:	f7ff fa4d 	bl	8000bb0 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001720:	4293      	cmp	r3, r2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e0b1      	b.n	800188c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001728:	4b4b      	ldr	r3, [pc, #300]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0ee      	beq.n	8001712 <HAL_RCC_OscConfig+0x37e>
 8001734:	e014      	b.n	8001760 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001736:	f7ff fa3b 	bl	8000bb0 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800173c:	e00a      	b.n	8001754 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173e:	f7ff fa37 	bl	8000bb0 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	f241 3288 	movw	r2, #5000	@ 0x1388
 800174c:	4293      	cmp	r3, r2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e09b      	b.n	800188c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001754:	4b40      	ldr	r3, [pc, #256]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1ee      	bne.n	800173e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001760:	7dfb      	ldrb	r3, [r7, #23]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d105      	bne.n	8001772 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001766:	4b3c      	ldr	r3, [pc, #240]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	4a3b      	ldr	r2, [pc, #236]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001770:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 8087 	beq.w	800188a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800177c:	4b36      	ldr	r3, [pc, #216]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 030c 	and.w	r3, r3, #12
 8001784:	2b08      	cmp	r3, #8
 8001786:	d061      	beq.n	800184c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	2b02      	cmp	r3, #2
 800178e:	d146      	bne.n	800181e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001790:	4b33      	ldr	r3, [pc, #204]	@ (8001860 <HAL_RCC_OscConfig+0x4cc>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001796:	f7ff fa0b 	bl	8000bb0 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179e:	f7ff fa07 	bl	8000bb0 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e06d      	b.n	800188c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b0:	4b29      	ldr	r3, [pc, #164]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1f0      	bne.n	800179e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017c4:	d108      	bne.n	80017d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017c6:	4b24      	ldr	r3, [pc, #144]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	4921      	ldr	r1, [pc, #132]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a19      	ldr	r1, [r3, #32]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e8:	430b      	orrs	r3, r1
 80017ea:	491b      	ldr	r1, [pc, #108]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001860 <HAL_RCC_OscConfig+0x4cc>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7ff f9db 	bl	8000bb0 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fe:	f7ff f9d7 	bl	8000bb0 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e03d      	b.n	800188c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001810:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x46a>
 800181c:	e035      	b.n	800188a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181e:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <HAL_RCC_OscConfig+0x4cc>)
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001824:	f7ff f9c4 	bl	8000bb0 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182c:	f7ff f9c0 	bl	8000bb0 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e026      	b.n	800188c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800183e:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <HAL_RCC_OscConfig+0x4c4>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x498>
 800184a:	e01e      	b.n	800188a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d107      	bne.n	8001864 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e019      	b.n	800188c <HAL_RCC_OscConfig+0x4f8>
 8001858:	40021000 	.word	0x40021000
 800185c:	40007000 	.word	0x40007000
 8001860:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001864:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <HAL_RCC_OscConfig+0x500>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	429a      	cmp	r2, r3
 8001876:	d106      	bne.n	8001886 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001882:	429a      	cmp	r2, r3
 8001884:	d001      	beq.n	800188a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40021000 	.word	0x40021000

08001898 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0d0      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d910      	bls.n	80018dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	4b67      	ldr	r3, [pc, #412]	@ (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 0207 	bic.w	r2, r3, #7
 80018c2:	4965      	ldr	r1, [pc, #404]	@ (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	4b63      	ldr	r3, [pc, #396]	@ (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0b8      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d020      	beq.n	800192a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f4:	4b59      	ldr	r3, [pc, #356]	@ (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	4a58      	ldr	r2, [pc, #352]	@ (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80018fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80018fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800190c:	4b53      	ldr	r3, [pc, #332]	@ (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	4a52      	ldr	r2, [pc, #328]	@ (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001912:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001916:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001918:	4b50      	ldr	r3, [pc, #320]	@ (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	494d      	ldr	r1, [pc, #308]	@ (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	4313      	orrs	r3, r2
 8001928:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d040      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d107      	bne.n	800194e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	4b47      	ldr	r3, [pc, #284]	@ (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d115      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e07f      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d107      	bne.n	8001966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001956:	4b41      	ldr	r3, [pc, #260]	@ (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e073      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001966:	4b3d      	ldr	r3, [pc, #244]	@ (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e06b      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001976:	4b39      	ldr	r3, [pc, #228]	@ (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f023 0203 	bic.w	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4936      	ldr	r1, [pc, #216]	@ (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	4313      	orrs	r3, r2
 8001986:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001988:	f7ff f912 	bl	8000bb0 <HAL_GetTick>
 800198c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198e:	e00a      	b.n	80019a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001990:	f7ff f90e 	bl	8000bb0 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e053      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 020c 	and.w	r2, r3, #12
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d1eb      	bne.n	8001990 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019b8:	4b27      	ldr	r3, [pc, #156]	@ (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d210      	bcs.n	80019e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b24      	ldr	r3, [pc, #144]	@ (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 0207 	bic.w	r2, r3, #7
 80019ce:	4922      	ldr	r1, [pc, #136]	@ (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d6:	4b20      	ldr	r3, [pc, #128]	@ (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e032      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d008      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f4:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	4916      	ldr	r1, [pc, #88]	@ (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d009      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a12:	4b12      	ldr	r3, [pc, #72]	@ (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	490e      	ldr	r1, [pc, #56]	@ (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a26:	f000 f821 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	490a      	ldr	r1, [pc, #40]	@ (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a38:	5ccb      	ldrb	r3, [r1, r3]
 8001a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3e:	4a09      	ldr	r2, [pc, #36]	@ (8001a64 <HAL_RCC_ClockConfig+0x1cc>)
 8001a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a42:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <HAL_RCC_ClockConfig+0x1d0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff f870 	bl	8000b2c <HAL_InitTick>

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40022000 	.word	0x40022000
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	08002bcc 	.word	0x08002bcc
 8001a64:	20000000 	.word	0x20000000
 8001a68:	20000004 	.word	0x20000004

08001a6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b087      	sub	sp, #28
 8001a70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a86:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d002      	beq.n	8001a9c <HAL_RCC_GetSysClockFreq+0x30>
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	d003      	beq.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x36>
 8001a9a:	e027      	b.n	8001aec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a9c:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a9e:	613b      	str	r3, [r7, #16]
      break;
 8001aa0:	e027      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	0c9b      	lsrs	r3, r3, #18
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	4a17      	ldr	r2, [pc, #92]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001aac:	5cd3      	ldrb	r3, [r2, r3]
 8001aae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d010      	beq.n	8001adc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001aba:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x94>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	0c5b      	lsrs	r3, r3, #17
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	4a11      	ldr	r2, [pc, #68]	@ (8001b0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ac6:	5cd3      	ldrb	r3, [r2, r3]
 8001ac8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ace:	fb03 f202 	mul.w	r2, r3, r2
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	e004      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a0c      	ldr	r2, [pc, #48]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ae0:	fb02 f303 	mul.w	r3, r2, r3
 8001ae4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	613b      	str	r3, [r7, #16]
      break;
 8001aea:	e002      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001aec:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aee:	613b      	str	r3, [r7, #16]
      break;
 8001af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af2:	693b      	ldr	r3, [r7, #16]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
 8001b04:	007a1200 	.word	0x007a1200
 8001b08:	08002be4 	.word	0x08002be4
 8001b0c:	08002bf4 	.word	0x08002bf4
 8001b10:	003d0900 	.word	0x003d0900

08001b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b18:	4b02      	ldr	r3, [pc, #8]	@ (8001b24 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	20000000 	.word	0x20000000

08001b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b2c:	f7ff fff2 	bl	8001b14 <HAL_RCC_GetHCLKFreq>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	0a1b      	lsrs	r3, r3, #8
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	4903      	ldr	r1, [pc, #12]	@ (8001b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b3e:	5ccb      	ldrb	r3, [r1, r3]
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	08002bdc 	.word	0x08002bdc

08001b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b54:	f7ff ffde 	bl	8001b14 <HAL_RCC_GetHCLKFreq>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	0adb      	lsrs	r3, r3, #11
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	4903      	ldr	r1, [pc, #12]	@ (8001b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b66:	5ccb      	ldrb	r3, [r1, r3]
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40021000 	.word	0x40021000
 8001b74:	08002bdc 	.word	0x08002bdc

08001b78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b80:	4b0a      	ldr	r3, [pc, #40]	@ (8001bac <RCC_Delay+0x34>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb0 <RCC_Delay+0x38>)
 8001b86:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8a:	0a5b      	lsrs	r3, r3, #9
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	fb02 f303 	mul.w	r3, r2, r3
 8001b92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b94:	bf00      	nop
  }
  while (Delay --);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1e5a      	subs	r2, r3, #1
 8001b9a:	60fa      	str	r2, [r7, #12]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f9      	bne.n	8001b94 <RCC_Delay+0x1c>
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	10624dd3 	.word	0x10624dd3

08001bb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e042      	b.n	8001c4c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d106      	bne.n	8001be0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7fe fe7e 	bl	80008dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2224      	movs	r2, #36	@ 0x24
 8001be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001bf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 fa09 	bl	8002010 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001c0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001c1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2220      	movs	r2, #32
 8001c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	@ 0x28
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	4613      	mov	r3, r2
 8001c62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b20      	cmp	r3, #32
 8001c72:	d175      	bne.n	8001d60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <HAL_UART_Transmit+0x2c>
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e06e      	b.n	8001d62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2221      	movs	r2, #33	@ 0x21
 8001c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c92:	f7fe ff8d 	bl	8000bb0 <HAL_GetTick>
 8001c96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	88fa      	ldrh	r2, [r7, #6]
 8001c9c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	88fa      	ldrh	r2, [r7, #6]
 8001ca2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cac:	d108      	bne.n	8001cc0 <HAL_UART_Transmit+0x6c>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d104      	bne.n	8001cc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	e003      	b.n	8001cc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001cc8:	e02e      	b.n	8001d28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2180      	movs	r1, #128	@ 0x80
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 f8df 	bl	8001e98 <UART_WaitOnFlagUntilTimeout>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e03a      	b.n	8001d62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10b      	bne.n	8001d0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	3302      	adds	r3, #2
 8001d06:	61bb      	str	r3, [r7, #24]
 8001d08:	e007      	b.n	8001d1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	781a      	ldrb	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	3301      	adds	r3, #1
 8001d18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1cb      	bne.n	8001cca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2140      	movs	r1, #64	@ 0x40
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f000 f8ab 	bl	8001e98 <UART_WaitOnFlagUntilTimeout>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e006      	b.n	8001d62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2220      	movs	r2, #32
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e000      	b.n	8001d62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001d60:	2302      	movs	r3, #2
  }
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3720      	adds	r7, #32
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b08a      	sub	sp, #40	@ 0x28
 8001d6e:	af02      	add	r7, sp, #8
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	4613      	mov	r3, r2
 8001d78:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b20      	cmp	r3, #32
 8001d88:	f040 8081 	bne.w	8001e8e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <HAL_UART_Receive+0x2e>
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e079      	b.n	8001e90 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2222      	movs	r2, #34	@ 0x22
 8001da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001db0:	f7fe fefe 	bl	8000bb0 <HAL_GetTick>
 8001db4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	88fa      	ldrh	r2, [r7, #6]
 8001dba:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	88fa      	ldrh	r2, [r7, #6]
 8001dc0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dca:	d108      	bne.n	8001dde <HAL_UART_Receive+0x74>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d104      	bne.n	8001dde <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	61bb      	str	r3, [r7, #24]
 8001ddc:	e003      	b.n	8001de6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001de6:	e047      	b.n	8001e78 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2200      	movs	r2, #0
 8001df0:	2120      	movs	r1, #32
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f850 	bl	8001e98 <UART_WaitOnFlagUntilTimeout>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d005      	beq.n	8001e0a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2220      	movs	r2, #32
 8001e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e042      	b.n	8001e90 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10c      	bne.n	8001e2a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	3302      	adds	r3, #2
 8001e26:	61bb      	str	r3, [r7, #24]
 8001e28:	e01f      	b.n	8001e6a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e32:	d007      	beq.n	8001e44 <HAL_UART_Receive+0xda>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10a      	bne.n	8001e52 <HAL_UART_Receive+0xe8>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d106      	bne.n	8001e52 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	701a      	strb	r2, [r3, #0]
 8001e50:	e008      	b.n	8001e64 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	3301      	adds	r3, #1
 8001e68:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1b2      	bne.n	8001de8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2220      	movs	r2, #32
 8001e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001e8e:	2302      	movs	r3, #2
  }
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3720      	adds	r7, #32
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	603b      	str	r3, [r7, #0]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ea8:	e03b      	b.n	8001f22 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb0:	d037      	beq.n	8001f22 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eb2:	f7fe fe7d 	bl	8000bb0 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	6a3a      	ldr	r2, [r7, #32]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d302      	bcc.n	8001ec8 <UART_WaitOnFlagUntilTimeout+0x30>
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e03a      	b.n	8001f42 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d023      	beq.n	8001f22 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2b80      	cmp	r3, #128	@ 0x80
 8001ede:	d020      	beq.n	8001f22 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b40      	cmp	r3, #64	@ 0x40
 8001ee4:	d01d      	beq.n	8001f22 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d116      	bne.n	8001f22 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 f81d 	bl	8001f4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2208      	movs	r2, #8
 8001f14:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00f      	b.n	8001f42 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	bf0c      	ite	eq
 8001f32:	2301      	moveq	r3, #1
 8001f34:	2300      	movne	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	461a      	mov	r2, r3
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d0b4      	beq.n	8001eaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b095      	sub	sp, #84	@ 0x54
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	330c      	adds	r3, #12
 8001f58:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f5c:	e853 3f00 	ldrex	r3, [r3]
 8001f60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	330c      	adds	r3, #12
 8001f70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f72:	643a      	str	r2, [r7, #64]	@ 0x40
 8001f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001f78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f7a:	e841 2300 	strex	r3, r2, [r1]
 8001f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1e5      	bne.n	8001f52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	3314      	adds	r3, #20
 8001f8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	e853 3f00 	ldrex	r3, [r3]
 8001f94:	61fb      	str	r3, [r7, #28]
   return(result);
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f023 0301 	bic.w	r3, r3, #1
 8001f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	3314      	adds	r3, #20
 8001fa4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001fa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001faa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fae:	e841 2300 	strex	r3, r2, [r1]
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1e5      	bne.n	8001f86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d119      	bne.n	8001ff6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	330c      	adds	r3, #12
 8001fc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	e853 3f00 	ldrex	r3, [r3]
 8001fd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	f023 0310 	bic.w	r3, r3, #16
 8001fd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	330c      	adds	r3, #12
 8001fe0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001fe2:	61ba      	str	r2, [r7, #24]
 8001fe4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fe6:	6979      	ldr	r1, [r7, #20]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	e841 2300 	strex	r3, r2, [r1]
 8001fee:	613b      	str	r3, [r7, #16]
   return(result);
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1e5      	bne.n	8001fc2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002004:	bf00      	nop
 8002006:	3754      	adds	r7, #84	@ 0x54
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr
	...

08002010 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	4313      	orrs	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800204a:	f023 030c 	bic.w	r3, r3, #12
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	68b9      	ldr	r1, [r7, #8]
 8002054:	430b      	orrs	r3, r1
 8002056:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699a      	ldr	r2, [r3, #24]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a2c      	ldr	r2, [pc, #176]	@ (8002124 <UART_SetConfig+0x114>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d103      	bne.n	8002080 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002078:	f7ff fd6a 	bl	8001b50 <HAL_RCC_GetPCLK2Freq>
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	e002      	b.n	8002086 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002080:	f7ff fd52 	bl	8001b28 <HAL_RCC_GetPCLK1Freq>
 8002084:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	009a      	lsls	r2, r3, #2
 8002090:	441a      	add	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	fbb2 f3f3 	udiv	r3, r2, r3
 800209c:	4a22      	ldr	r2, [pc, #136]	@ (8002128 <UART_SetConfig+0x118>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	0119      	lsls	r1, r3, #4
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	009a      	lsls	r2, r3, #2
 80020b0:	441a      	add	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80020bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002128 <UART_SetConfig+0x118>)
 80020be:	fba3 0302 	umull	r0, r3, r3, r2
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	2064      	movs	r0, #100	@ 0x64
 80020c6:	fb00 f303 	mul.w	r3, r0, r3
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	3332      	adds	r3, #50	@ 0x32
 80020d0:	4a15      	ldr	r2, [pc, #84]	@ (8002128 <UART_SetConfig+0x118>)
 80020d2:	fba2 2303 	umull	r2, r3, r2, r3
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020dc:	4419      	add	r1, r3
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	009a      	lsls	r2, r3, #2
 80020e8:	441a      	add	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <UART_SetConfig+0x118>)
 80020f6:	fba3 0302 	umull	r0, r3, r3, r2
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	2064      	movs	r0, #100	@ 0x64
 80020fe:	fb00 f303 	mul.w	r3, r0, r3
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	3332      	adds	r3, #50	@ 0x32
 8002108:	4a07      	ldr	r2, [pc, #28]	@ (8002128 <UART_SetConfig+0x118>)
 800210a:	fba2 2303 	umull	r2, r3, r2, r3
 800210e:	095b      	lsrs	r3, r3, #5
 8002110:	f003 020f 	and.w	r2, r3, #15
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	440a      	add	r2, r1
 800211a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800211c:	bf00      	nop
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40013800 	.word	0x40013800
 8002128:	51eb851f 	.word	0x51eb851f

0800212c <siprintf>:
 800212c:	b40e      	push	{r1, r2, r3}
 800212e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002132:	b510      	push	{r4, lr}
 8002134:	2400      	movs	r4, #0
 8002136:	b09d      	sub	sp, #116	@ 0x74
 8002138:	ab1f      	add	r3, sp, #124	@ 0x7c
 800213a:	9002      	str	r0, [sp, #8]
 800213c:	9006      	str	r0, [sp, #24]
 800213e:	9107      	str	r1, [sp, #28]
 8002140:	9104      	str	r1, [sp, #16]
 8002142:	4809      	ldr	r0, [pc, #36]	@ (8002168 <siprintf+0x3c>)
 8002144:	4909      	ldr	r1, [pc, #36]	@ (800216c <siprintf+0x40>)
 8002146:	f853 2b04 	ldr.w	r2, [r3], #4
 800214a:	9105      	str	r1, [sp, #20]
 800214c:	6800      	ldr	r0, [r0, #0]
 800214e:	a902      	add	r1, sp, #8
 8002150:	9301      	str	r3, [sp, #4]
 8002152:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002154:	f000 f9a8 	bl	80024a8 <_svfiprintf_r>
 8002158:	9b02      	ldr	r3, [sp, #8]
 800215a:	701c      	strb	r4, [r3, #0]
 800215c:	b01d      	add	sp, #116	@ 0x74
 800215e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002162:	b003      	add	sp, #12
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	2000000c 	.word	0x2000000c
 800216c:	ffff0208 	.word	0xffff0208

08002170 <memset>:
 8002170:	4603      	mov	r3, r0
 8002172:	4402      	add	r2, r0
 8002174:	4293      	cmp	r3, r2
 8002176:	d100      	bne.n	800217a <memset+0xa>
 8002178:	4770      	bx	lr
 800217a:	f803 1b01 	strb.w	r1, [r3], #1
 800217e:	e7f9      	b.n	8002174 <memset+0x4>

08002180 <strstr>:
 8002180:	780a      	ldrb	r2, [r1, #0]
 8002182:	b570      	push	{r4, r5, r6, lr}
 8002184:	b96a      	cbnz	r2, 80021a2 <strstr+0x22>
 8002186:	bd70      	pop	{r4, r5, r6, pc}
 8002188:	429a      	cmp	r2, r3
 800218a:	d109      	bne.n	80021a0 <strstr+0x20>
 800218c:	460c      	mov	r4, r1
 800218e:	4605      	mov	r5, r0
 8002190:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f6      	beq.n	8002186 <strstr+0x6>
 8002198:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800219c:	429e      	cmp	r6, r3
 800219e:	d0f7      	beq.n	8002190 <strstr+0x10>
 80021a0:	3001      	adds	r0, #1
 80021a2:	7803      	ldrb	r3, [r0, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1ef      	bne.n	8002188 <strstr+0x8>
 80021a8:	4618      	mov	r0, r3
 80021aa:	e7ec      	b.n	8002186 <strstr+0x6>

080021ac <__errno>:
 80021ac:	4b01      	ldr	r3, [pc, #4]	@ (80021b4 <__errno+0x8>)
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	2000000c 	.word	0x2000000c

080021b8 <__libc_init_array>:
 80021b8:	b570      	push	{r4, r5, r6, lr}
 80021ba:	2600      	movs	r6, #0
 80021bc:	4d0c      	ldr	r5, [pc, #48]	@ (80021f0 <__libc_init_array+0x38>)
 80021be:	4c0d      	ldr	r4, [pc, #52]	@ (80021f4 <__libc_init_array+0x3c>)
 80021c0:	1b64      	subs	r4, r4, r5
 80021c2:	10a4      	asrs	r4, r4, #2
 80021c4:	42a6      	cmp	r6, r4
 80021c6:	d109      	bne.n	80021dc <__libc_init_array+0x24>
 80021c8:	f000 fc76 	bl	8002ab8 <_init>
 80021cc:	2600      	movs	r6, #0
 80021ce:	4d0a      	ldr	r5, [pc, #40]	@ (80021f8 <__libc_init_array+0x40>)
 80021d0:	4c0a      	ldr	r4, [pc, #40]	@ (80021fc <__libc_init_array+0x44>)
 80021d2:	1b64      	subs	r4, r4, r5
 80021d4:	10a4      	asrs	r4, r4, #2
 80021d6:	42a6      	cmp	r6, r4
 80021d8:	d105      	bne.n	80021e6 <__libc_init_array+0x2e>
 80021da:	bd70      	pop	{r4, r5, r6, pc}
 80021dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80021e0:	4798      	blx	r3
 80021e2:	3601      	adds	r6, #1
 80021e4:	e7ee      	b.n	80021c4 <__libc_init_array+0xc>
 80021e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80021ea:	4798      	blx	r3
 80021ec:	3601      	adds	r6, #1
 80021ee:	e7f2      	b.n	80021d6 <__libc_init_array+0x1e>
 80021f0:	08002c34 	.word	0x08002c34
 80021f4:	08002c34 	.word	0x08002c34
 80021f8:	08002c34 	.word	0x08002c34
 80021fc:	08002c38 	.word	0x08002c38

08002200 <__retarget_lock_acquire_recursive>:
 8002200:	4770      	bx	lr

08002202 <__retarget_lock_release_recursive>:
 8002202:	4770      	bx	lr

08002204 <_free_r>:
 8002204:	b538      	push	{r3, r4, r5, lr}
 8002206:	4605      	mov	r5, r0
 8002208:	2900      	cmp	r1, #0
 800220a:	d040      	beq.n	800228e <_free_r+0x8a>
 800220c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002210:	1f0c      	subs	r4, r1, #4
 8002212:	2b00      	cmp	r3, #0
 8002214:	bfb8      	it	lt
 8002216:	18e4      	addlt	r4, r4, r3
 8002218:	f000 f8de 	bl	80023d8 <__malloc_lock>
 800221c:	4a1c      	ldr	r2, [pc, #112]	@ (8002290 <_free_r+0x8c>)
 800221e:	6813      	ldr	r3, [r2, #0]
 8002220:	b933      	cbnz	r3, 8002230 <_free_r+0x2c>
 8002222:	6063      	str	r3, [r4, #4]
 8002224:	6014      	str	r4, [r2, #0]
 8002226:	4628      	mov	r0, r5
 8002228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800222c:	f000 b8da 	b.w	80023e4 <__malloc_unlock>
 8002230:	42a3      	cmp	r3, r4
 8002232:	d908      	bls.n	8002246 <_free_r+0x42>
 8002234:	6820      	ldr	r0, [r4, #0]
 8002236:	1821      	adds	r1, r4, r0
 8002238:	428b      	cmp	r3, r1
 800223a:	bf01      	itttt	eq
 800223c:	6819      	ldreq	r1, [r3, #0]
 800223e:	685b      	ldreq	r3, [r3, #4]
 8002240:	1809      	addeq	r1, r1, r0
 8002242:	6021      	streq	r1, [r4, #0]
 8002244:	e7ed      	b.n	8002222 <_free_r+0x1e>
 8002246:	461a      	mov	r2, r3
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	b10b      	cbz	r3, 8002250 <_free_r+0x4c>
 800224c:	42a3      	cmp	r3, r4
 800224e:	d9fa      	bls.n	8002246 <_free_r+0x42>
 8002250:	6811      	ldr	r1, [r2, #0]
 8002252:	1850      	adds	r0, r2, r1
 8002254:	42a0      	cmp	r0, r4
 8002256:	d10b      	bne.n	8002270 <_free_r+0x6c>
 8002258:	6820      	ldr	r0, [r4, #0]
 800225a:	4401      	add	r1, r0
 800225c:	1850      	adds	r0, r2, r1
 800225e:	4283      	cmp	r3, r0
 8002260:	6011      	str	r1, [r2, #0]
 8002262:	d1e0      	bne.n	8002226 <_free_r+0x22>
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4408      	add	r0, r1
 800226a:	6010      	str	r0, [r2, #0]
 800226c:	6053      	str	r3, [r2, #4]
 800226e:	e7da      	b.n	8002226 <_free_r+0x22>
 8002270:	d902      	bls.n	8002278 <_free_r+0x74>
 8002272:	230c      	movs	r3, #12
 8002274:	602b      	str	r3, [r5, #0]
 8002276:	e7d6      	b.n	8002226 <_free_r+0x22>
 8002278:	6820      	ldr	r0, [r4, #0]
 800227a:	1821      	adds	r1, r4, r0
 800227c:	428b      	cmp	r3, r1
 800227e:	bf01      	itttt	eq
 8002280:	6819      	ldreq	r1, [r3, #0]
 8002282:	685b      	ldreq	r3, [r3, #4]
 8002284:	1809      	addeq	r1, r1, r0
 8002286:	6021      	streq	r1, [r4, #0]
 8002288:	6063      	str	r3, [r4, #4]
 800228a:	6054      	str	r4, [r2, #4]
 800228c:	e7cb      	b.n	8002226 <_free_r+0x22>
 800228e:	bd38      	pop	{r3, r4, r5, pc}
 8002290:	200003ac 	.word	0x200003ac

08002294 <sbrk_aligned>:
 8002294:	b570      	push	{r4, r5, r6, lr}
 8002296:	4e0f      	ldr	r6, [pc, #60]	@ (80022d4 <sbrk_aligned+0x40>)
 8002298:	460c      	mov	r4, r1
 800229a:	6831      	ldr	r1, [r6, #0]
 800229c:	4605      	mov	r5, r0
 800229e:	b911      	cbnz	r1, 80022a6 <sbrk_aligned+0x12>
 80022a0:	f000 fba8 	bl	80029f4 <_sbrk_r>
 80022a4:	6030      	str	r0, [r6, #0]
 80022a6:	4621      	mov	r1, r4
 80022a8:	4628      	mov	r0, r5
 80022aa:	f000 fba3 	bl	80029f4 <_sbrk_r>
 80022ae:	1c43      	adds	r3, r0, #1
 80022b0:	d103      	bne.n	80022ba <sbrk_aligned+0x26>
 80022b2:	f04f 34ff 	mov.w	r4, #4294967295
 80022b6:	4620      	mov	r0, r4
 80022b8:	bd70      	pop	{r4, r5, r6, pc}
 80022ba:	1cc4      	adds	r4, r0, #3
 80022bc:	f024 0403 	bic.w	r4, r4, #3
 80022c0:	42a0      	cmp	r0, r4
 80022c2:	d0f8      	beq.n	80022b6 <sbrk_aligned+0x22>
 80022c4:	1a21      	subs	r1, r4, r0
 80022c6:	4628      	mov	r0, r5
 80022c8:	f000 fb94 	bl	80029f4 <_sbrk_r>
 80022cc:	3001      	adds	r0, #1
 80022ce:	d1f2      	bne.n	80022b6 <sbrk_aligned+0x22>
 80022d0:	e7ef      	b.n	80022b2 <sbrk_aligned+0x1e>
 80022d2:	bf00      	nop
 80022d4:	200003a8 	.word	0x200003a8

080022d8 <_malloc_r>:
 80022d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022dc:	1ccd      	adds	r5, r1, #3
 80022de:	f025 0503 	bic.w	r5, r5, #3
 80022e2:	3508      	adds	r5, #8
 80022e4:	2d0c      	cmp	r5, #12
 80022e6:	bf38      	it	cc
 80022e8:	250c      	movcc	r5, #12
 80022ea:	2d00      	cmp	r5, #0
 80022ec:	4606      	mov	r6, r0
 80022ee:	db01      	blt.n	80022f4 <_malloc_r+0x1c>
 80022f0:	42a9      	cmp	r1, r5
 80022f2:	d904      	bls.n	80022fe <_malloc_r+0x26>
 80022f4:	230c      	movs	r3, #12
 80022f6:	6033      	str	r3, [r6, #0]
 80022f8:	2000      	movs	r0, #0
 80022fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80023d4 <_malloc_r+0xfc>
 8002302:	f000 f869 	bl	80023d8 <__malloc_lock>
 8002306:	f8d8 3000 	ldr.w	r3, [r8]
 800230a:	461c      	mov	r4, r3
 800230c:	bb44      	cbnz	r4, 8002360 <_malloc_r+0x88>
 800230e:	4629      	mov	r1, r5
 8002310:	4630      	mov	r0, r6
 8002312:	f7ff ffbf 	bl	8002294 <sbrk_aligned>
 8002316:	1c43      	adds	r3, r0, #1
 8002318:	4604      	mov	r4, r0
 800231a:	d158      	bne.n	80023ce <_malloc_r+0xf6>
 800231c:	f8d8 4000 	ldr.w	r4, [r8]
 8002320:	4627      	mov	r7, r4
 8002322:	2f00      	cmp	r7, #0
 8002324:	d143      	bne.n	80023ae <_malloc_r+0xd6>
 8002326:	2c00      	cmp	r4, #0
 8002328:	d04b      	beq.n	80023c2 <_malloc_r+0xea>
 800232a:	6823      	ldr	r3, [r4, #0]
 800232c:	4639      	mov	r1, r7
 800232e:	4630      	mov	r0, r6
 8002330:	eb04 0903 	add.w	r9, r4, r3
 8002334:	f000 fb5e 	bl	80029f4 <_sbrk_r>
 8002338:	4581      	cmp	r9, r0
 800233a:	d142      	bne.n	80023c2 <_malloc_r+0xea>
 800233c:	6821      	ldr	r1, [r4, #0]
 800233e:	4630      	mov	r0, r6
 8002340:	1a6d      	subs	r5, r5, r1
 8002342:	4629      	mov	r1, r5
 8002344:	f7ff ffa6 	bl	8002294 <sbrk_aligned>
 8002348:	3001      	adds	r0, #1
 800234a:	d03a      	beq.n	80023c2 <_malloc_r+0xea>
 800234c:	6823      	ldr	r3, [r4, #0]
 800234e:	442b      	add	r3, r5
 8002350:	6023      	str	r3, [r4, #0]
 8002352:	f8d8 3000 	ldr.w	r3, [r8]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	bb62      	cbnz	r2, 80023b4 <_malloc_r+0xdc>
 800235a:	f8c8 7000 	str.w	r7, [r8]
 800235e:	e00f      	b.n	8002380 <_malloc_r+0xa8>
 8002360:	6822      	ldr	r2, [r4, #0]
 8002362:	1b52      	subs	r2, r2, r5
 8002364:	d420      	bmi.n	80023a8 <_malloc_r+0xd0>
 8002366:	2a0b      	cmp	r2, #11
 8002368:	d917      	bls.n	800239a <_malloc_r+0xc2>
 800236a:	1961      	adds	r1, r4, r5
 800236c:	42a3      	cmp	r3, r4
 800236e:	6025      	str	r5, [r4, #0]
 8002370:	bf18      	it	ne
 8002372:	6059      	strne	r1, [r3, #4]
 8002374:	6863      	ldr	r3, [r4, #4]
 8002376:	bf08      	it	eq
 8002378:	f8c8 1000 	streq.w	r1, [r8]
 800237c:	5162      	str	r2, [r4, r5]
 800237e:	604b      	str	r3, [r1, #4]
 8002380:	4630      	mov	r0, r6
 8002382:	f000 f82f 	bl	80023e4 <__malloc_unlock>
 8002386:	f104 000b 	add.w	r0, r4, #11
 800238a:	1d23      	adds	r3, r4, #4
 800238c:	f020 0007 	bic.w	r0, r0, #7
 8002390:	1ac2      	subs	r2, r0, r3
 8002392:	bf1c      	itt	ne
 8002394:	1a1b      	subne	r3, r3, r0
 8002396:	50a3      	strne	r3, [r4, r2]
 8002398:	e7af      	b.n	80022fa <_malloc_r+0x22>
 800239a:	6862      	ldr	r2, [r4, #4]
 800239c:	42a3      	cmp	r3, r4
 800239e:	bf0c      	ite	eq
 80023a0:	f8c8 2000 	streq.w	r2, [r8]
 80023a4:	605a      	strne	r2, [r3, #4]
 80023a6:	e7eb      	b.n	8002380 <_malloc_r+0xa8>
 80023a8:	4623      	mov	r3, r4
 80023aa:	6864      	ldr	r4, [r4, #4]
 80023ac:	e7ae      	b.n	800230c <_malloc_r+0x34>
 80023ae:	463c      	mov	r4, r7
 80023b0:	687f      	ldr	r7, [r7, #4]
 80023b2:	e7b6      	b.n	8002322 <_malloc_r+0x4a>
 80023b4:	461a      	mov	r2, r3
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	42a3      	cmp	r3, r4
 80023ba:	d1fb      	bne.n	80023b4 <_malloc_r+0xdc>
 80023bc:	2300      	movs	r3, #0
 80023be:	6053      	str	r3, [r2, #4]
 80023c0:	e7de      	b.n	8002380 <_malloc_r+0xa8>
 80023c2:	230c      	movs	r3, #12
 80023c4:	4630      	mov	r0, r6
 80023c6:	6033      	str	r3, [r6, #0]
 80023c8:	f000 f80c 	bl	80023e4 <__malloc_unlock>
 80023cc:	e794      	b.n	80022f8 <_malloc_r+0x20>
 80023ce:	6005      	str	r5, [r0, #0]
 80023d0:	e7d6      	b.n	8002380 <_malloc_r+0xa8>
 80023d2:	bf00      	nop
 80023d4:	200003ac 	.word	0x200003ac

080023d8 <__malloc_lock>:
 80023d8:	4801      	ldr	r0, [pc, #4]	@ (80023e0 <__malloc_lock+0x8>)
 80023da:	f7ff bf11 	b.w	8002200 <__retarget_lock_acquire_recursive>
 80023de:	bf00      	nop
 80023e0:	200003a4 	.word	0x200003a4

080023e4 <__malloc_unlock>:
 80023e4:	4801      	ldr	r0, [pc, #4]	@ (80023ec <__malloc_unlock+0x8>)
 80023e6:	f7ff bf0c 	b.w	8002202 <__retarget_lock_release_recursive>
 80023ea:	bf00      	nop
 80023ec:	200003a4 	.word	0x200003a4

080023f0 <__ssputs_r>:
 80023f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023f4:	461f      	mov	r7, r3
 80023f6:	688e      	ldr	r6, [r1, #8]
 80023f8:	4682      	mov	sl, r0
 80023fa:	42be      	cmp	r6, r7
 80023fc:	460c      	mov	r4, r1
 80023fe:	4690      	mov	r8, r2
 8002400:	680b      	ldr	r3, [r1, #0]
 8002402:	d82d      	bhi.n	8002460 <__ssputs_r+0x70>
 8002404:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002408:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800240c:	d026      	beq.n	800245c <__ssputs_r+0x6c>
 800240e:	6965      	ldr	r5, [r4, #20]
 8002410:	6909      	ldr	r1, [r1, #16]
 8002412:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002416:	eba3 0901 	sub.w	r9, r3, r1
 800241a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800241e:	1c7b      	adds	r3, r7, #1
 8002420:	444b      	add	r3, r9
 8002422:	106d      	asrs	r5, r5, #1
 8002424:	429d      	cmp	r5, r3
 8002426:	bf38      	it	cc
 8002428:	461d      	movcc	r5, r3
 800242a:	0553      	lsls	r3, r2, #21
 800242c:	d527      	bpl.n	800247e <__ssputs_r+0x8e>
 800242e:	4629      	mov	r1, r5
 8002430:	f7ff ff52 	bl	80022d8 <_malloc_r>
 8002434:	4606      	mov	r6, r0
 8002436:	b360      	cbz	r0, 8002492 <__ssputs_r+0xa2>
 8002438:	464a      	mov	r2, r9
 800243a:	6921      	ldr	r1, [r4, #16]
 800243c:	f000 faf8 	bl	8002a30 <memcpy>
 8002440:	89a3      	ldrh	r3, [r4, #12]
 8002442:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800244a:	81a3      	strh	r3, [r4, #12]
 800244c:	6126      	str	r6, [r4, #16]
 800244e:	444e      	add	r6, r9
 8002450:	6026      	str	r6, [r4, #0]
 8002452:	463e      	mov	r6, r7
 8002454:	6165      	str	r5, [r4, #20]
 8002456:	eba5 0509 	sub.w	r5, r5, r9
 800245a:	60a5      	str	r5, [r4, #8]
 800245c:	42be      	cmp	r6, r7
 800245e:	d900      	bls.n	8002462 <__ssputs_r+0x72>
 8002460:	463e      	mov	r6, r7
 8002462:	4632      	mov	r2, r6
 8002464:	4641      	mov	r1, r8
 8002466:	6820      	ldr	r0, [r4, #0]
 8002468:	f000 faaa 	bl	80029c0 <memmove>
 800246c:	2000      	movs	r0, #0
 800246e:	68a3      	ldr	r3, [r4, #8]
 8002470:	1b9b      	subs	r3, r3, r6
 8002472:	60a3      	str	r3, [r4, #8]
 8002474:	6823      	ldr	r3, [r4, #0]
 8002476:	4433      	add	r3, r6
 8002478:	6023      	str	r3, [r4, #0]
 800247a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800247e:	462a      	mov	r2, r5
 8002480:	f000 fae4 	bl	8002a4c <_realloc_r>
 8002484:	4606      	mov	r6, r0
 8002486:	2800      	cmp	r0, #0
 8002488:	d1e0      	bne.n	800244c <__ssputs_r+0x5c>
 800248a:	4650      	mov	r0, sl
 800248c:	6921      	ldr	r1, [r4, #16]
 800248e:	f7ff feb9 	bl	8002204 <_free_r>
 8002492:	230c      	movs	r3, #12
 8002494:	f8ca 3000 	str.w	r3, [sl]
 8002498:	89a3      	ldrh	r3, [r4, #12]
 800249a:	f04f 30ff 	mov.w	r0, #4294967295
 800249e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024a2:	81a3      	strh	r3, [r4, #12]
 80024a4:	e7e9      	b.n	800247a <__ssputs_r+0x8a>
	...

080024a8 <_svfiprintf_r>:
 80024a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024ac:	4698      	mov	r8, r3
 80024ae:	898b      	ldrh	r3, [r1, #12]
 80024b0:	4607      	mov	r7, r0
 80024b2:	061b      	lsls	r3, r3, #24
 80024b4:	460d      	mov	r5, r1
 80024b6:	4614      	mov	r4, r2
 80024b8:	b09d      	sub	sp, #116	@ 0x74
 80024ba:	d510      	bpl.n	80024de <_svfiprintf_r+0x36>
 80024bc:	690b      	ldr	r3, [r1, #16]
 80024be:	b973      	cbnz	r3, 80024de <_svfiprintf_r+0x36>
 80024c0:	2140      	movs	r1, #64	@ 0x40
 80024c2:	f7ff ff09 	bl	80022d8 <_malloc_r>
 80024c6:	6028      	str	r0, [r5, #0]
 80024c8:	6128      	str	r0, [r5, #16]
 80024ca:	b930      	cbnz	r0, 80024da <_svfiprintf_r+0x32>
 80024cc:	230c      	movs	r3, #12
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	f04f 30ff 	mov.w	r0, #4294967295
 80024d4:	b01d      	add	sp, #116	@ 0x74
 80024d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024da:	2340      	movs	r3, #64	@ 0x40
 80024dc:	616b      	str	r3, [r5, #20]
 80024de:	2300      	movs	r3, #0
 80024e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80024e2:	2320      	movs	r3, #32
 80024e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80024e8:	2330      	movs	r3, #48	@ 0x30
 80024ea:	f04f 0901 	mov.w	r9, #1
 80024ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80024f2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800268c <_svfiprintf_r+0x1e4>
 80024f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80024fa:	4623      	mov	r3, r4
 80024fc:	469a      	mov	sl, r3
 80024fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002502:	b10a      	cbz	r2, 8002508 <_svfiprintf_r+0x60>
 8002504:	2a25      	cmp	r2, #37	@ 0x25
 8002506:	d1f9      	bne.n	80024fc <_svfiprintf_r+0x54>
 8002508:	ebba 0b04 	subs.w	fp, sl, r4
 800250c:	d00b      	beq.n	8002526 <_svfiprintf_r+0x7e>
 800250e:	465b      	mov	r3, fp
 8002510:	4622      	mov	r2, r4
 8002512:	4629      	mov	r1, r5
 8002514:	4638      	mov	r0, r7
 8002516:	f7ff ff6b 	bl	80023f0 <__ssputs_r>
 800251a:	3001      	adds	r0, #1
 800251c:	f000 80a7 	beq.w	800266e <_svfiprintf_r+0x1c6>
 8002520:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002522:	445a      	add	r2, fp
 8002524:	9209      	str	r2, [sp, #36]	@ 0x24
 8002526:	f89a 3000 	ldrb.w	r3, [sl]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 809f 	beq.w	800266e <_svfiprintf_r+0x1c6>
 8002530:	2300      	movs	r3, #0
 8002532:	f04f 32ff 	mov.w	r2, #4294967295
 8002536:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800253a:	f10a 0a01 	add.w	sl, sl, #1
 800253e:	9304      	str	r3, [sp, #16]
 8002540:	9307      	str	r3, [sp, #28]
 8002542:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002546:	931a      	str	r3, [sp, #104]	@ 0x68
 8002548:	4654      	mov	r4, sl
 800254a:	2205      	movs	r2, #5
 800254c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002550:	484e      	ldr	r0, [pc, #312]	@ (800268c <_svfiprintf_r+0x1e4>)
 8002552:	f000 fa5f 	bl	8002a14 <memchr>
 8002556:	9a04      	ldr	r2, [sp, #16]
 8002558:	b9d8      	cbnz	r0, 8002592 <_svfiprintf_r+0xea>
 800255a:	06d0      	lsls	r0, r2, #27
 800255c:	bf44      	itt	mi
 800255e:	2320      	movmi	r3, #32
 8002560:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002564:	0711      	lsls	r1, r2, #28
 8002566:	bf44      	itt	mi
 8002568:	232b      	movmi	r3, #43	@ 0x2b
 800256a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800256e:	f89a 3000 	ldrb.w	r3, [sl]
 8002572:	2b2a      	cmp	r3, #42	@ 0x2a
 8002574:	d015      	beq.n	80025a2 <_svfiprintf_r+0xfa>
 8002576:	4654      	mov	r4, sl
 8002578:	2000      	movs	r0, #0
 800257a:	f04f 0c0a 	mov.w	ip, #10
 800257e:	9a07      	ldr	r2, [sp, #28]
 8002580:	4621      	mov	r1, r4
 8002582:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002586:	3b30      	subs	r3, #48	@ 0x30
 8002588:	2b09      	cmp	r3, #9
 800258a:	d94b      	bls.n	8002624 <_svfiprintf_r+0x17c>
 800258c:	b1b0      	cbz	r0, 80025bc <_svfiprintf_r+0x114>
 800258e:	9207      	str	r2, [sp, #28]
 8002590:	e014      	b.n	80025bc <_svfiprintf_r+0x114>
 8002592:	eba0 0308 	sub.w	r3, r0, r8
 8002596:	fa09 f303 	lsl.w	r3, r9, r3
 800259a:	4313      	orrs	r3, r2
 800259c:	46a2      	mov	sl, r4
 800259e:	9304      	str	r3, [sp, #16]
 80025a0:	e7d2      	b.n	8002548 <_svfiprintf_r+0xa0>
 80025a2:	9b03      	ldr	r3, [sp, #12]
 80025a4:	1d19      	adds	r1, r3, #4
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	9103      	str	r1, [sp, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	bfbb      	ittet	lt
 80025ae:	425b      	neglt	r3, r3
 80025b0:	f042 0202 	orrlt.w	r2, r2, #2
 80025b4:	9307      	strge	r3, [sp, #28]
 80025b6:	9307      	strlt	r3, [sp, #28]
 80025b8:	bfb8      	it	lt
 80025ba:	9204      	strlt	r2, [sp, #16]
 80025bc:	7823      	ldrb	r3, [r4, #0]
 80025be:	2b2e      	cmp	r3, #46	@ 0x2e
 80025c0:	d10a      	bne.n	80025d8 <_svfiprintf_r+0x130>
 80025c2:	7863      	ldrb	r3, [r4, #1]
 80025c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80025c6:	d132      	bne.n	800262e <_svfiprintf_r+0x186>
 80025c8:	9b03      	ldr	r3, [sp, #12]
 80025ca:	3402      	adds	r4, #2
 80025cc:	1d1a      	adds	r2, r3, #4
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	9203      	str	r2, [sp, #12]
 80025d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80025d6:	9305      	str	r3, [sp, #20]
 80025d8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002690 <_svfiprintf_r+0x1e8>
 80025dc:	2203      	movs	r2, #3
 80025de:	4650      	mov	r0, sl
 80025e0:	7821      	ldrb	r1, [r4, #0]
 80025e2:	f000 fa17 	bl	8002a14 <memchr>
 80025e6:	b138      	cbz	r0, 80025f8 <_svfiprintf_r+0x150>
 80025e8:	2240      	movs	r2, #64	@ 0x40
 80025ea:	9b04      	ldr	r3, [sp, #16]
 80025ec:	eba0 000a 	sub.w	r0, r0, sl
 80025f0:	4082      	lsls	r2, r0
 80025f2:	4313      	orrs	r3, r2
 80025f4:	3401      	adds	r4, #1
 80025f6:	9304      	str	r3, [sp, #16]
 80025f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025fc:	2206      	movs	r2, #6
 80025fe:	4825      	ldr	r0, [pc, #148]	@ (8002694 <_svfiprintf_r+0x1ec>)
 8002600:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002604:	f000 fa06 	bl	8002a14 <memchr>
 8002608:	2800      	cmp	r0, #0
 800260a:	d036      	beq.n	800267a <_svfiprintf_r+0x1d2>
 800260c:	4b22      	ldr	r3, [pc, #136]	@ (8002698 <_svfiprintf_r+0x1f0>)
 800260e:	bb1b      	cbnz	r3, 8002658 <_svfiprintf_r+0x1b0>
 8002610:	9b03      	ldr	r3, [sp, #12]
 8002612:	3307      	adds	r3, #7
 8002614:	f023 0307 	bic.w	r3, r3, #7
 8002618:	3308      	adds	r3, #8
 800261a:	9303      	str	r3, [sp, #12]
 800261c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800261e:	4433      	add	r3, r6
 8002620:	9309      	str	r3, [sp, #36]	@ 0x24
 8002622:	e76a      	b.n	80024fa <_svfiprintf_r+0x52>
 8002624:	460c      	mov	r4, r1
 8002626:	2001      	movs	r0, #1
 8002628:	fb0c 3202 	mla	r2, ip, r2, r3
 800262c:	e7a8      	b.n	8002580 <_svfiprintf_r+0xd8>
 800262e:	2300      	movs	r3, #0
 8002630:	f04f 0c0a 	mov.w	ip, #10
 8002634:	4619      	mov	r1, r3
 8002636:	3401      	adds	r4, #1
 8002638:	9305      	str	r3, [sp, #20]
 800263a:	4620      	mov	r0, r4
 800263c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002640:	3a30      	subs	r2, #48	@ 0x30
 8002642:	2a09      	cmp	r2, #9
 8002644:	d903      	bls.n	800264e <_svfiprintf_r+0x1a6>
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0c6      	beq.n	80025d8 <_svfiprintf_r+0x130>
 800264a:	9105      	str	r1, [sp, #20]
 800264c:	e7c4      	b.n	80025d8 <_svfiprintf_r+0x130>
 800264e:	4604      	mov	r4, r0
 8002650:	2301      	movs	r3, #1
 8002652:	fb0c 2101 	mla	r1, ip, r1, r2
 8002656:	e7f0      	b.n	800263a <_svfiprintf_r+0x192>
 8002658:	ab03      	add	r3, sp, #12
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	462a      	mov	r2, r5
 800265e:	4638      	mov	r0, r7
 8002660:	4b0e      	ldr	r3, [pc, #56]	@ (800269c <_svfiprintf_r+0x1f4>)
 8002662:	a904      	add	r1, sp, #16
 8002664:	f3af 8000 	nop.w
 8002668:	1c42      	adds	r2, r0, #1
 800266a:	4606      	mov	r6, r0
 800266c:	d1d6      	bne.n	800261c <_svfiprintf_r+0x174>
 800266e:	89ab      	ldrh	r3, [r5, #12]
 8002670:	065b      	lsls	r3, r3, #25
 8002672:	f53f af2d 	bmi.w	80024d0 <_svfiprintf_r+0x28>
 8002676:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002678:	e72c      	b.n	80024d4 <_svfiprintf_r+0x2c>
 800267a:	ab03      	add	r3, sp, #12
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	462a      	mov	r2, r5
 8002680:	4638      	mov	r0, r7
 8002682:	4b06      	ldr	r3, [pc, #24]	@ (800269c <_svfiprintf_r+0x1f4>)
 8002684:	a904      	add	r1, sp, #16
 8002686:	f000 f87d 	bl	8002784 <_printf_i>
 800268a:	e7ed      	b.n	8002668 <_svfiprintf_r+0x1c0>
 800268c:	08002bf6 	.word	0x08002bf6
 8002690:	08002bfc 	.word	0x08002bfc
 8002694:	08002c00 	.word	0x08002c00
 8002698:	00000000 	.word	0x00000000
 800269c:	080023f1 	.word	0x080023f1

080026a0 <_printf_common>:
 80026a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026a4:	4616      	mov	r6, r2
 80026a6:	4698      	mov	r8, r3
 80026a8:	688a      	ldr	r2, [r1, #8]
 80026aa:	690b      	ldr	r3, [r1, #16]
 80026ac:	4607      	mov	r7, r0
 80026ae:	4293      	cmp	r3, r2
 80026b0:	bfb8      	it	lt
 80026b2:	4613      	movlt	r3, r2
 80026b4:	6033      	str	r3, [r6, #0]
 80026b6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80026ba:	460c      	mov	r4, r1
 80026bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80026c0:	b10a      	cbz	r2, 80026c6 <_printf_common+0x26>
 80026c2:	3301      	adds	r3, #1
 80026c4:	6033      	str	r3, [r6, #0]
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	0699      	lsls	r1, r3, #26
 80026ca:	bf42      	ittt	mi
 80026cc:	6833      	ldrmi	r3, [r6, #0]
 80026ce:	3302      	addmi	r3, #2
 80026d0:	6033      	strmi	r3, [r6, #0]
 80026d2:	6825      	ldr	r5, [r4, #0]
 80026d4:	f015 0506 	ands.w	r5, r5, #6
 80026d8:	d106      	bne.n	80026e8 <_printf_common+0x48>
 80026da:	f104 0a19 	add.w	sl, r4, #25
 80026de:	68e3      	ldr	r3, [r4, #12]
 80026e0:	6832      	ldr	r2, [r6, #0]
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	42ab      	cmp	r3, r5
 80026e6:	dc2b      	bgt.n	8002740 <_printf_common+0xa0>
 80026e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80026ec:	6822      	ldr	r2, [r4, #0]
 80026ee:	3b00      	subs	r3, #0
 80026f0:	bf18      	it	ne
 80026f2:	2301      	movne	r3, #1
 80026f4:	0692      	lsls	r2, r2, #26
 80026f6:	d430      	bmi.n	800275a <_printf_common+0xba>
 80026f8:	4641      	mov	r1, r8
 80026fa:	4638      	mov	r0, r7
 80026fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002700:	47c8      	blx	r9
 8002702:	3001      	adds	r0, #1
 8002704:	d023      	beq.n	800274e <_printf_common+0xae>
 8002706:	6823      	ldr	r3, [r4, #0]
 8002708:	6922      	ldr	r2, [r4, #16]
 800270a:	f003 0306 	and.w	r3, r3, #6
 800270e:	2b04      	cmp	r3, #4
 8002710:	bf14      	ite	ne
 8002712:	2500      	movne	r5, #0
 8002714:	6833      	ldreq	r3, [r6, #0]
 8002716:	f04f 0600 	mov.w	r6, #0
 800271a:	bf08      	it	eq
 800271c:	68e5      	ldreq	r5, [r4, #12]
 800271e:	f104 041a 	add.w	r4, r4, #26
 8002722:	bf08      	it	eq
 8002724:	1aed      	subeq	r5, r5, r3
 8002726:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800272a:	bf08      	it	eq
 800272c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002730:	4293      	cmp	r3, r2
 8002732:	bfc4      	itt	gt
 8002734:	1a9b      	subgt	r3, r3, r2
 8002736:	18ed      	addgt	r5, r5, r3
 8002738:	42b5      	cmp	r5, r6
 800273a:	d11a      	bne.n	8002772 <_printf_common+0xd2>
 800273c:	2000      	movs	r0, #0
 800273e:	e008      	b.n	8002752 <_printf_common+0xb2>
 8002740:	2301      	movs	r3, #1
 8002742:	4652      	mov	r2, sl
 8002744:	4641      	mov	r1, r8
 8002746:	4638      	mov	r0, r7
 8002748:	47c8      	blx	r9
 800274a:	3001      	adds	r0, #1
 800274c:	d103      	bne.n	8002756 <_printf_common+0xb6>
 800274e:	f04f 30ff 	mov.w	r0, #4294967295
 8002752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002756:	3501      	adds	r5, #1
 8002758:	e7c1      	b.n	80026de <_printf_common+0x3e>
 800275a:	2030      	movs	r0, #48	@ 0x30
 800275c:	18e1      	adds	r1, r4, r3
 800275e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002768:	4422      	add	r2, r4
 800276a:	3302      	adds	r3, #2
 800276c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002770:	e7c2      	b.n	80026f8 <_printf_common+0x58>
 8002772:	2301      	movs	r3, #1
 8002774:	4622      	mov	r2, r4
 8002776:	4641      	mov	r1, r8
 8002778:	4638      	mov	r0, r7
 800277a:	47c8      	blx	r9
 800277c:	3001      	adds	r0, #1
 800277e:	d0e6      	beq.n	800274e <_printf_common+0xae>
 8002780:	3601      	adds	r6, #1
 8002782:	e7d9      	b.n	8002738 <_printf_common+0x98>

08002784 <_printf_i>:
 8002784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002788:	7e0f      	ldrb	r7, [r1, #24]
 800278a:	4691      	mov	r9, r2
 800278c:	2f78      	cmp	r7, #120	@ 0x78
 800278e:	4680      	mov	r8, r0
 8002790:	460c      	mov	r4, r1
 8002792:	469a      	mov	sl, r3
 8002794:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002796:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800279a:	d807      	bhi.n	80027ac <_printf_i+0x28>
 800279c:	2f62      	cmp	r7, #98	@ 0x62
 800279e:	d80a      	bhi.n	80027b6 <_printf_i+0x32>
 80027a0:	2f00      	cmp	r7, #0
 80027a2:	f000 80d1 	beq.w	8002948 <_printf_i+0x1c4>
 80027a6:	2f58      	cmp	r7, #88	@ 0x58
 80027a8:	f000 80b8 	beq.w	800291c <_printf_i+0x198>
 80027ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80027b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80027b4:	e03a      	b.n	800282c <_printf_i+0xa8>
 80027b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80027ba:	2b15      	cmp	r3, #21
 80027bc:	d8f6      	bhi.n	80027ac <_printf_i+0x28>
 80027be:	a101      	add	r1, pc, #4	@ (adr r1, 80027c4 <_printf_i+0x40>)
 80027c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80027c4:	0800281d 	.word	0x0800281d
 80027c8:	08002831 	.word	0x08002831
 80027cc:	080027ad 	.word	0x080027ad
 80027d0:	080027ad 	.word	0x080027ad
 80027d4:	080027ad 	.word	0x080027ad
 80027d8:	080027ad 	.word	0x080027ad
 80027dc:	08002831 	.word	0x08002831
 80027e0:	080027ad 	.word	0x080027ad
 80027e4:	080027ad 	.word	0x080027ad
 80027e8:	080027ad 	.word	0x080027ad
 80027ec:	080027ad 	.word	0x080027ad
 80027f0:	0800292f 	.word	0x0800292f
 80027f4:	0800285b 	.word	0x0800285b
 80027f8:	080028e9 	.word	0x080028e9
 80027fc:	080027ad 	.word	0x080027ad
 8002800:	080027ad 	.word	0x080027ad
 8002804:	08002951 	.word	0x08002951
 8002808:	080027ad 	.word	0x080027ad
 800280c:	0800285b 	.word	0x0800285b
 8002810:	080027ad 	.word	0x080027ad
 8002814:	080027ad 	.word	0x080027ad
 8002818:	080028f1 	.word	0x080028f1
 800281c:	6833      	ldr	r3, [r6, #0]
 800281e:	1d1a      	adds	r2, r3, #4
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6032      	str	r2, [r6, #0]
 8002824:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002828:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800282c:	2301      	movs	r3, #1
 800282e:	e09c      	b.n	800296a <_printf_i+0x1e6>
 8002830:	6833      	ldr	r3, [r6, #0]
 8002832:	6820      	ldr	r0, [r4, #0]
 8002834:	1d19      	adds	r1, r3, #4
 8002836:	6031      	str	r1, [r6, #0]
 8002838:	0606      	lsls	r6, r0, #24
 800283a:	d501      	bpl.n	8002840 <_printf_i+0xbc>
 800283c:	681d      	ldr	r5, [r3, #0]
 800283e:	e003      	b.n	8002848 <_printf_i+0xc4>
 8002840:	0645      	lsls	r5, r0, #25
 8002842:	d5fb      	bpl.n	800283c <_printf_i+0xb8>
 8002844:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002848:	2d00      	cmp	r5, #0
 800284a:	da03      	bge.n	8002854 <_printf_i+0xd0>
 800284c:	232d      	movs	r3, #45	@ 0x2d
 800284e:	426d      	negs	r5, r5
 8002850:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002854:	230a      	movs	r3, #10
 8002856:	4858      	ldr	r0, [pc, #352]	@ (80029b8 <_printf_i+0x234>)
 8002858:	e011      	b.n	800287e <_printf_i+0xfa>
 800285a:	6821      	ldr	r1, [r4, #0]
 800285c:	6833      	ldr	r3, [r6, #0]
 800285e:	0608      	lsls	r0, r1, #24
 8002860:	f853 5b04 	ldr.w	r5, [r3], #4
 8002864:	d402      	bmi.n	800286c <_printf_i+0xe8>
 8002866:	0649      	lsls	r1, r1, #25
 8002868:	bf48      	it	mi
 800286a:	b2ad      	uxthmi	r5, r5
 800286c:	2f6f      	cmp	r7, #111	@ 0x6f
 800286e:	6033      	str	r3, [r6, #0]
 8002870:	bf14      	ite	ne
 8002872:	230a      	movne	r3, #10
 8002874:	2308      	moveq	r3, #8
 8002876:	4850      	ldr	r0, [pc, #320]	@ (80029b8 <_printf_i+0x234>)
 8002878:	2100      	movs	r1, #0
 800287a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800287e:	6866      	ldr	r6, [r4, #4]
 8002880:	2e00      	cmp	r6, #0
 8002882:	60a6      	str	r6, [r4, #8]
 8002884:	db05      	blt.n	8002892 <_printf_i+0x10e>
 8002886:	6821      	ldr	r1, [r4, #0]
 8002888:	432e      	orrs	r6, r5
 800288a:	f021 0104 	bic.w	r1, r1, #4
 800288e:	6021      	str	r1, [r4, #0]
 8002890:	d04b      	beq.n	800292a <_printf_i+0x1a6>
 8002892:	4616      	mov	r6, r2
 8002894:	fbb5 f1f3 	udiv	r1, r5, r3
 8002898:	fb03 5711 	mls	r7, r3, r1, r5
 800289c:	5dc7      	ldrb	r7, [r0, r7]
 800289e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80028a2:	462f      	mov	r7, r5
 80028a4:	42bb      	cmp	r3, r7
 80028a6:	460d      	mov	r5, r1
 80028a8:	d9f4      	bls.n	8002894 <_printf_i+0x110>
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d10b      	bne.n	80028c6 <_printf_i+0x142>
 80028ae:	6823      	ldr	r3, [r4, #0]
 80028b0:	07df      	lsls	r7, r3, #31
 80028b2:	d508      	bpl.n	80028c6 <_printf_i+0x142>
 80028b4:	6923      	ldr	r3, [r4, #16]
 80028b6:	6861      	ldr	r1, [r4, #4]
 80028b8:	4299      	cmp	r1, r3
 80028ba:	bfde      	ittt	le
 80028bc:	2330      	movle	r3, #48	@ 0x30
 80028be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80028c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80028c6:	1b92      	subs	r2, r2, r6
 80028c8:	6122      	str	r2, [r4, #16]
 80028ca:	464b      	mov	r3, r9
 80028cc:	4621      	mov	r1, r4
 80028ce:	4640      	mov	r0, r8
 80028d0:	f8cd a000 	str.w	sl, [sp]
 80028d4:	aa03      	add	r2, sp, #12
 80028d6:	f7ff fee3 	bl	80026a0 <_printf_common>
 80028da:	3001      	adds	r0, #1
 80028dc:	d14a      	bne.n	8002974 <_printf_i+0x1f0>
 80028de:	f04f 30ff 	mov.w	r0, #4294967295
 80028e2:	b004      	add	sp, #16
 80028e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	f043 0320 	orr.w	r3, r3, #32
 80028ee:	6023      	str	r3, [r4, #0]
 80028f0:	2778      	movs	r7, #120	@ 0x78
 80028f2:	4832      	ldr	r0, [pc, #200]	@ (80029bc <_printf_i+0x238>)
 80028f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80028f8:	6823      	ldr	r3, [r4, #0]
 80028fa:	6831      	ldr	r1, [r6, #0]
 80028fc:	061f      	lsls	r7, r3, #24
 80028fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8002902:	d402      	bmi.n	800290a <_printf_i+0x186>
 8002904:	065f      	lsls	r7, r3, #25
 8002906:	bf48      	it	mi
 8002908:	b2ad      	uxthmi	r5, r5
 800290a:	6031      	str	r1, [r6, #0]
 800290c:	07d9      	lsls	r1, r3, #31
 800290e:	bf44      	itt	mi
 8002910:	f043 0320 	orrmi.w	r3, r3, #32
 8002914:	6023      	strmi	r3, [r4, #0]
 8002916:	b11d      	cbz	r5, 8002920 <_printf_i+0x19c>
 8002918:	2310      	movs	r3, #16
 800291a:	e7ad      	b.n	8002878 <_printf_i+0xf4>
 800291c:	4826      	ldr	r0, [pc, #152]	@ (80029b8 <_printf_i+0x234>)
 800291e:	e7e9      	b.n	80028f4 <_printf_i+0x170>
 8002920:	6823      	ldr	r3, [r4, #0]
 8002922:	f023 0320 	bic.w	r3, r3, #32
 8002926:	6023      	str	r3, [r4, #0]
 8002928:	e7f6      	b.n	8002918 <_printf_i+0x194>
 800292a:	4616      	mov	r6, r2
 800292c:	e7bd      	b.n	80028aa <_printf_i+0x126>
 800292e:	6833      	ldr	r3, [r6, #0]
 8002930:	6825      	ldr	r5, [r4, #0]
 8002932:	1d18      	adds	r0, r3, #4
 8002934:	6961      	ldr	r1, [r4, #20]
 8002936:	6030      	str	r0, [r6, #0]
 8002938:	062e      	lsls	r6, r5, #24
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	d501      	bpl.n	8002942 <_printf_i+0x1be>
 800293e:	6019      	str	r1, [r3, #0]
 8002940:	e002      	b.n	8002948 <_printf_i+0x1c4>
 8002942:	0668      	lsls	r0, r5, #25
 8002944:	d5fb      	bpl.n	800293e <_printf_i+0x1ba>
 8002946:	8019      	strh	r1, [r3, #0]
 8002948:	2300      	movs	r3, #0
 800294a:	4616      	mov	r6, r2
 800294c:	6123      	str	r3, [r4, #16]
 800294e:	e7bc      	b.n	80028ca <_printf_i+0x146>
 8002950:	6833      	ldr	r3, [r6, #0]
 8002952:	2100      	movs	r1, #0
 8002954:	1d1a      	adds	r2, r3, #4
 8002956:	6032      	str	r2, [r6, #0]
 8002958:	681e      	ldr	r6, [r3, #0]
 800295a:	6862      	ldr	r2, [r4, #4]
 800295c:	4630      	mov	r0, r6
 800295e:	f000 f859 	bl	8002a14 <memchr>
 8002962:	b108      	cbz	r0, 8002968 <_printf_i+0x1e4>
 8002964:	1b80      	subs	r0, r0, r6
 8002966:	6060      	str	r0, [r4, #4]
 8002968:	6863      	ldr	r3, [r4, #4]
 800296a:	6123      	str	r3, [r4, #16]
 800296c:	2300      	movs	r3, #0
 800296e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002972:	e7aa      	b.n	80028ca <_printf_i+0x146>
 8002974:	4632      	mov	r2, r6
 8002976:	4649      	mov	r1, r9
 8002978:	4640      	mov	r0, r8
 800297a:	6923      	ldr	r3, [r4, #16]
 800297c:	47d0      	blx	sl
 800297e:	3001      	adds	r0, #1
 8002980:	d0ad      	beq.n	80028de <_printf_i+0x15a>
 8002982:	6823      	ldr	r3, [r4, #0]
 8002984:	079b      	lsls	r3, r3, #30
 8002986:	d413      	bmi.n	80029b0 <_printf_i+0x22c>
 8002988:	68e0      	ldr	r0, [r4, #12]
 800298a:	9b03      	ldr	r3, [sp, #12]
 800298c:	4298      	cmp	r0, r3
 800298e:	bfb8      	it	lt
 8002990:	4618      	movlt	r0, r3
 8002992:	e7a6      	b.n	80028e2 <_printf_i+0x15e>
 8002994:	2301      	movs	r3, #1
 8002996:	4632      	mov	r2, r6
 8002998:	4649      	mov	r1, r9
 800299a:	4640      	mov	r0, r8
 800299c:	47d0      	blx	sl
 800299e:	3001      	adds	r0, #1
 80029a0:	d09d      	beq.n	80028de <_printf_i+0x15a>
 80029a2:	3501      	adds	r5, #1
 80029a4:	68e3      	ldr	r3, [r4, #12]
 80029a6:	9903      	ldr	r1, [sp, #12]
 80029a8:	1a5b      	subs	r3, r3, r1
 80029aa:	42ab      	cmp	r3, r5
 80029ac:	dcf2      	bgt.n	8002994 <_printf_i+0x210>
 80029ae:	e7eb      	b.n	8002988 <_printf_i+0x204>
 80029b0:	2500      	movs	r5, #0
 80029b2:	f104 0619 	add.w	r6, r4, #25
 80029b6:	e7f5      	b.n	80029a4 <_printf_i+0x220>
 80029b8:	08002c07 	.word	0x08002c07
 80029bc:	08002c18 	.word	0x08002c18

080029c0 <memmove>:
 80029c0:	4288      	cmp	r0, r1
 80029c2:	b510      	push	{r4, lr}
 80029c4:	eb01 0402 	add.w	r4, r1, r2
 80029c8:	d902      	bls.n	80029d0 <memmove+0x10>
 80029ca:	4284      	cmp	r4, r0
 80029cc:	4623      	mov	r3, r4
 80029ce:	d807      	bhi.n	80029e0 <memmove+0x20>
 80029d0:	1e43      	subs	r3, r0, #1
 80029d2:	42a1      	cmp	r1, r4
 80029d4:	d008      	beq.n	80029e8 <memmove+0x28>
 80029d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80029de:	e7f8      	b.n	80029d2 <memmove+0x12>
 80029e0:	4601      	mov	r1, r0
 80029e2:	4402      	add	r2, r0
 80029e4:	428a      	cmp	r2, r1
 80029e6:	d100      	bne.n	80029ea <memmove+0x2a>
 80029e8:	bd10      	pop	{r4, pc}
 80029ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80029ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80029f2:	e7f7      	b.n	80029e4 <memmove+0x24>

080029f4 <_sbrk_r>:
 80029f4:	b538      	push	{r3, r4, r5, lr}
 80029f6:	2300      	movs	r3, #0
 80029f8:	4d05      	ldr	r5, [pc, #20]	@ (8002a10 <_sbrk_r+0x1c>)
 80029fa:	4604      	mov	r4, r0
 80029fc:	4608      	mov	r0, r1
 80029fe:	602b      	str	r3, [r5, #0]
 8002a00:	f7fe f81c 	bl	8000a3c <_sbrk>
 8002a04:	1c43      	adds	r3, r0, #1
 8002a06:	d102      	bne.n	8002a0e <_sbrk_r+0x1a>
 8002a08:	682b      	ldr	r3, [r5, #0]
 8002a0a:	b103      	cbz	r3, 8002a0e <_sbrk_r+0x1a>
 8002a0c:	6023      	str	r3, [r4, #0]
 8002a0e:	bd38      	pop	{r3, r4, r5, pc}
 8002a10:	200003a0 	.word	0x200003a0

08002a14 <memchr>:
 8002a14:	4603      	mov	r3, r0
 8002a16:	b510      	push	{r4, lr}
 8002a18:	b2c9      	uxtb	r1, r1
 8002a1a:	4402      	add	r2, r0
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	4618      	mov	r0, r3
 8002a20:	d101      	bne.n	8002a26 <memchr+0x12>
 8002a22:	2000      	movs	r0, #0
 8002a24:	e003      	b.n	8002a2e <memchr+0x1a>
 8002a26:	7804      	ldrb	r4, [r0, #0]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	428c      	cmp	r4, r1
 8002a2c:	d1f6      	bne.n	8002a1c <memchr+0x8>
 8002a2e:	bd10      	pop	{r4, pc}

08002a30 <memcpy>:
 8002a30:	440a      	add	r2, r1
 8002a32:	4291      	cmp	r1, r2
 8002a34:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a38:	d100      	bne.n	8002a3c <memcpy+0xc>
 8002a3a:	4770      	bx	lr
 8002a3c:	b510      	push	{r4, lr}
 8002a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a42:	4291      	cmp	r1, r2
 8002a44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a48:	d1f9      	bne.n	8002a3e <memcpy+0xe>
 8002a4a:	bd10      	pop	{r4, pc}

08002a4c <_realloc_r>:
 8002a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a50:	4607      	mov	r7, r0
 8002a52:	4614      	mov	r4, r2
 8002a54:	460d      	mov	r5, r1
 8002a56:	b921      	cbnz	r1, 8002a62 <_realloc_r+0x16>
 8002a58:	4611      	mov	r1, r2
 8002a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a5e:	f7ff bc3b 	b.w	80022d8 <_malloc_r>
 8002a62:	b92a      	cbnz	r2, 8002a70 <_realloc_r+0x24>
 8002a64:	f7ff fbce 	bl	8002204 <_free_r>
 8002a68:	4625      	mov	r5, r4
 8002a6a:	4628      	mov	r0, r5
 8002a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a70:	f000 f81a 	bl	8002aa8 <_malloc_usable_size_r>
 8002a74:	4284      	cmp	r4, r0
 8002a76:	4606      	mov	r6, r0
 8002a78:	d802      	bhi.n	8002a80 <_realloc_r+0x34>
 8002a7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002a7e:	d8f4      	bhi.n	8002a6a <_realloc_r+0x1e>
 8002a80:	4621      	mov	r1, r4
 8002a82:	4638      	mov	r0, r7
 8002a84:	f7ff fc28 	bl	80022d8 <_malloc_r>
 8002a88:	4680      	mov	r8, r0
 8002a8a:	b908      	cbnz	r0, 8002a90 <_realloc_r+0x44>
 8002a8c:	4645      	mov	r5, r8
 8002a8e:	e7ec      	b.n	8002a6a <_realloc_r+0x1e>
 8002a90:	42b4      	cmp	r4, r6
 8002a92:	4622      	mov	r2, r4
 8002a94:	4629      	mov	r1, r5
 8002a96:	bf28      	it	cs
 8002a98:	4632      	movcs	r2, r6
 8002a9a:	f7ff ffc9 	bl	8002a30 <memcpy>
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	4638      	mov	r0, r7
 8002aa2:	f7ff fbaf 	bl	8002204 <_free_r>
 8002aa6:	e7f1      	b.n	8002a8c <_realloc_r+0x40>

08002aa8 <_malloc_usable_size_r>:
 8002aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002aac:	1f18      	subs	r0, r3, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bfbc      	itt	lt
 8002ab2:	580b      	ldrlt	r3, [r1, r0]
 8002ab4:	18c0      	addlt	r0, r0, r3
 8002ab6:	4770      	bx	lr

08002ab8 <_init>:
 8002ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aba:	bf00      	nop
 8002abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002abe:	bc08      	pop	{r3}
 8002ac0:	469e      	mov	lr, r3
 8002ac2:	4770      	bx	lr

08002ac4 <_fini>:
 8002ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac6:	bf00      	nop
 8002ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aca:	bc08      	pop	{r3}
 8002acc:	469e      	mov	lr, r3
 8002ace:	4770      	bx	lr
